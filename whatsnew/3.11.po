# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-29 17:18+0300\n"
"PO-Revision-Date: 2022-07-02 20:46+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "What's New In Python 3.11"
msgstr "Що нового в Python 3.11"

msgid "Release"
msgstr "Реліз"

msgid "|release|"
msgstr "|release|"

msgid "Date"
msgstr "Дата"

msgid "|today|"
msgstr "|today|"

msgid ""
"This article explains the new features in Python 3.11, compared to 3.10."
msgstr "У цій статті пояснюється нові функції в Python 3.11 порівняно з 3.10."

msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr ""
"Щоб отримати повну інформацію, перегляньте :ref:`журнал змін <changelog>`."

msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.11 moves towards release, "
"so it's worth checking back even after reading earlier versions."
msgstr ""
"Користувачі попередніх версій повинні знати, що цей документ наразі є "
"чернеткою. Його буде суттєво оновлено, коли Python 3.11 наближається до "
"випуску, тому варто перевірити його навіть після прочитання попередніх "
"версій."

msgid "Summary -- Release highlights"
msgstr "Підсумок – основні моменти випуску"

msgid ""
"Python 3.11 is up to 10-60% faster than Python 3.10. On average, we measured "
"a 1.25x speedup on the standard benchmark suite. See `Faster CPython`_ for "
"details."
msgstr ""
"Python 3.11 на 10-60% швидший за Python 3.10. У середньому ми виміряли "
"прискорення стандартного тесту в 1,25 раза. Перегляньте `Faster CPython`_ "
"для деталей."

msgid "New syntax features:"
msgstr "Нові функції синтаксису:"

msgid ""
":pep:`654`: Exception Groups and ``except*``. (Contributed by Irit Katriel "
"in :issue:`45292`.)"
msgstr ""
":pep:`654`: Групи винятків і ``except*``. (Надано Іріт Катріель у :issue:"
"`45292`.)"

msgid "New typing features:"
msgstr "Нові функції набору тексту:"

msgid ":pep:`646`: Variadic generics."
msgstr ":pep:`646`: Різноманітні генерики."

msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially-"
"missing."
msgstr ""
":pep:`655`: Позначення окремих елементів TypedDict як обов’язкових або "
"потенційно відсутніх."

msgid ":pep:`673`: ``Self`` type."
msgstr ":pep:`673`: Тип ``Self``."

msgid ":pep:`675`: Arbitrary literal string type."
msgstr ":pep:`675`: Довільний тип рядка літералу."

msgid "Security improvements:"
msgstr "Покращення безпеки:"

msgid ""
"New :option:`-P` command line option and :envvar:`PYTHONSAFEPATH` "
"environment variable to not prepend a potentially unsafe path to :data:`sys."
"path` such as the current directory, the script's directory or an empty "
"string."
msgstr ""
"Новий параметр командного рядка :option:`-P` і змінна середовища :envvar:"
"`PYTHONSAFEPATH`, щоб не додавати потенційно небезпечний шлях до :data:`sys."
"path`, як-от поточний каталог, каталог сценарію або порожній рядок."

msgid "New Features"
msgstr "Нові можливості"

msgid "Enhanced error locations in tracebacks"
msgstr "Покращено розташування помилок у зворотному відстеженні"

msgid ""
"When printing tracebacks, the interpreter will now point to the exact "
"expression that caused the error instead of just the line. For example:"
msgstr ""
"Під час друку трасування інтерпретатор тепер вказуватиме на точний вираз, "
"який спричинив помилку, а не лише на рядок. Наприклад:"

msgid ""
"Previous versions of the interpreter would point to just the line making it "
"ambiguous which object was ``None``. These enhanced errors can also be "
"helpful when dealing with deeply nested dictionary objects and multiple "
"function calls,"
msgstr ""
"Попередні версії інтерпретатора вказували лише на рядок, роблячи "
"неоднозначним те, який об’єкт був ``None``. Ці розширені помилки також "
"можуть бути корисними при роботі з глибоко вкладеними об’єктами словника та "
"кількома викликами функцій,"

msgid "as well as complex arithmetic expressions:"
msgstr "а також складні арифметичні вирази:"

msgid ""
"See :pep:`657` for more details. (Contributed by Pablo Galindo, Batuhan "
"Taskaya and Ammar Askar in :issue:`43950`.)"
msgstr ""
"Дивіться :pep:`657` для більш детальної інформації. (Надано Пабло Галіндо, "
"Батуханом Таською та Аммаром Аскаром у :issue:`43950`.)"

msgid ""
"This feature requires storing column positions in code objects which may "
"result in a small increase of disk usage of compiled Python files or "
"interpreter memory usage. To avoid storing the extra information and/or "
"deactivate printing the extra traceback information, the :option:`-X` "
"``no_debug_ranges`` command line flag or the :envvar:`PYTHONNODEBUGRANGES` "
"environment variable can be used."
msgstr ""
"Ця функція вимагає зберігання позицій стовпців в об’єктах коду, що може "
"призвести до невеликого збільшення використання диска для скомпільованих "
"файлів Python або використання пам’яті інтерпретатора. Щоб уникнути "
"збереження додаткової інформації та/або дезактивувати друк додаткової "
"інформації про відстеження, можна використовувати прапор командного рядка :"
"option:`-X` ``no_debug_ranges`` або змінну середовища :envvar:"
"`PYTHONNODEBUGRANGES`."

msgid "Column information for code objects"
msgstr "Інформація про стовпець для об’єктів коду"

msgid ""
"The information used by the enhanced traceback feature is made available as "
"a general API that can be used to correlate bytecode instructions with "
"source code. This information can be retrieved using:"
msgstr ""
"Інформація, яка використовується розширеною функцією відстеження, доступна "
"як загальний API, який можна використовувати для співвіднесення інструкцій "
"байт-коду з вихідним кодом. Цю інформацію можна отримати за допомогою:"

msgid "The :meth:`codeobject.co_positions` method in Python."
msgstr "Метод :meth:`codeobject.co_positions` в Python."

msgid "The :c:func:`PyCode_Addr2Location` function in the C-API."
msgstr "Функція :c:func:`PyCode_Addr2Location` в C-API."

msgid ""
"The :option:`-X` ``no_debug_ranges`` option and the environment variable :"
"envvar:`PYTHONNODEBUGRANGES` can be used to disable this feature."
msgstr ""
"Параметр :option:`-X` ``no_debug_ranges`` і змінна середовища :envvar:"
"`PYTHONNODEBUGRANGES` можна використовувати для вимкнення цієї функції."

msgid "Exceptions can be enriched with notes (PEP 678)"
msgstr "Винятки можуть бути збагачені примітками (PEP 678)"

msgid ""
"The :meth:`add_note` method was added to :exc:`BaseException`. It can be "
"used to enrich exceptions with context information which is not available at "
"the time when the exception is raised. The notes added appear in the default "
"traceback. See :pep:`678` for more details. (Contributed by Irit Katriel in :"
"issue:`45607`.)"
msgstr ""
"Метод :meth:`add_note` додано до :exc:`BaseException`. Він може бути "
"використаний для збагачення винятків контекстною інформацією, яка недоступна "
"на момент виникнення винятку. Додані примітки відображаються у зворотній "
"трасуванні за замовчуванням. Дивіться :pep:`678` для більш детальної "
"інформації. (Надано Іріт Катріель у :issue:`45607`.)"

msgid "New Features Related to Type Hints"
msgstr "Нові функції, пов’язані з підказками типу"

msgid ""
"This section covers major changes affecting :pep:`484` type hints and the :"
"mod:`typing` module."
msgstr ""
"У цьому розділі розглядаються основні зміни, що стосуються підказок типу :"
"pep:`484` і модуля :mod:`typing`."

msgid "PEP 646: Variadic generics"
msgstr "PEP 646: різноманітні генерики"

msgid ""
":pep:`484` introduced :data:`~typing.TypeVar`, enabling creation of generics "
"parameterised with a single type. :pep:`646` introduces :data:`~typing."
"TypeVarTuple`, enabling parameterisation with an *arbitrary* number of "
"types. In other words, a :data:`~typing.TypeVarTuple` is a *variadic* type "
"variable, enabling *variadic* generics. This enables a wide variety of use "
"cases. In particular, it allows the type of array-like structures in "
"numerical computing libraries such as NumPy and TensorFlow to be "
"parameterised with the array *shape*. Static type checkers will now be able "
"to catch shape-related bugs in code that uses these libraries."
msgstr ""
":pep:`484` представлено :data:`~typing.TypeVar`, що дозволяє створювати "
"генерики, параметризовані одним типом. :pep:`646` представляє :data:`~typing."
"TypeVarTuple`, що дозволяє параметризувати *довільну* кількість типів. "
"Іншими словами, :data:`~typing.TypeVarTuple` є змінною *variadic* типу, що "
"дозволяє *variadic* генерики. Це забезпечує широку різноманітність випадків "
"використання. Зокрема, це дозволяє параметризувати тип структур, подібних до "
"масиву, у бібліотеках числових обчислень, таких як NumPy і TensorFlow, за "
"допомогою масиву *shape*. Засоби перевірки статичних типів тепер зможуть "
"виявляти помилки, пов’язані з формою, у коді, який використовує ці "
"бібліотеки."

msgid "See :pep:`646` for more details."
msgstr "Дивіться :pep:`646` для більш детальної інформації."

msgid ""
"(Contributed by Matthew Rahtz in :issue:`43224`, with contributions by "
"Serhiy Storchaka and Jelle Zijlstra. PEP written by Mark Mendoza, Matthew "
"Rahtz, Pradeep Kumar Srinivasan, and Vincent Siles.)"
msgstr ""
"(Надано Метью Ратцем у :issue:`43224`, внески Сергія Сторчаки та Джелле "
"Зійлстри. Автори PEP — Марк Мендоза, Метью Ратц, Прадіп Кумар Срінівасан і "
"Вінсент Сайлс.)"

msgid ""
"PEP 655: Marking individual ``TypedDict`` items as required or not-required"
msgstr ""
"PEP 655: Позначення окремих елементів ``TypedDict`` як обов’язкових чи "
"непотрібних"

msgid ""
":data:`~typing.Required` and :data:`~typing.NotRequired` provide a "
"straightforward way to mark whether individual items in a :data:`~typing."
"TypedDict` must be present. Previously this was only possible using "
"inheritance."
msgstr ""
":data:`~typing.Required` і :data:`~typing.NotRequired` забезпечують простий "
"спосіб позначити, чи мають бути присутні окремі елементи в :data:`~typing."
"TypedDict`. Раніше це було можливо лише за допомогою успадкування."

msgid ""
"Fields are still required by default, unless the ``total=False`` parameter "
"is set. For example, the following specifies a dictionary with one required "
"and one not-required key::"
msgstr ""
"Поля все ще є обов’язковими за замовчуванням, якщо не встановлено параметр "
"``total=False``. Наприклад, наступне визначає словник з одним обов’язковим і "
"одним необов’язковим ключем::"

msgid "The following definition is equivalent::"
msgstr "Наступне визначення еквівалентне:"

msgid "See :pep:`655` for more details."
msgstr "Дивіться :pep:`655` для більш детальної інформації."

msgid ""
"(Contributed by David Foster and Jelle Zijlstra in :issue:`47087`. PEP "
"written by David Foster.)"
msgstr ""
"(Надано Девідом Фостером і Джелле Зійлстра в :issue:`47087`. PEP написав "
"Девід Фостер.)"

msgid "PEP 673: ``Self`` type"
msgstr "PEP 673: тип ``Self``"

msgid ""
"The new :data:`~typing.Self` annotation provides a simple and intuitive way "
"to annotate methods that return an instance of their class. This behaves the "
"same as the :data:`~typing.TypeVar`-based approach specified in :pep:`484` "
"but is more concise and easier to follow."
msgstr ""
"Нова анотація :data:`~typing.Self` забезпечує простий та інтуїтивно "
"зрозумілий спосіб анотації методів, які повертають екземпляр свого класу. Це "
"працює так само, як підхід на основі :data:`~typing.TypeVar`, визначений у :"
"pep:`484`, але є більш лаконічним і легшим для дотримання."

msgid ""
"Common use cases include alternative constructors provided as classmethods "
"and :meth:`~object.__enter__` methods that return ``self``::"
msgstr ""
"Загальні випадки використання включають альтернативні конструктори, надані "
"як методи класу та методи :meth:`~object.__enter__`, які повертають "
"``self``::"

msgid ""
":data:`~typing.Self` can also be used to annotate method parameters or "
"attributes of the same type as their enclosing class."
msgstr ""
":data:`~typing.Self` також можна використовувати для анотування параметрів "
"методу або атрибутів того самого типу, що й клас, що їх охоплює."

msgid "See :pep:`673` for more details."
msgstr "Дивіться :pep:`673` для більш детальної інформації."

msgid ""
"(Contributed by James Hilton-Balfe in :issue:`46534`. PEP written by Pradeep "
"Kumar Srinivasan and James Hilton-Balfe.)"
msgstr ""
"(Надав Джеймс Хілтон-Балф у :issue:`46534`. PEP написали Прадіп Кумар "
"Срінівасан і Джеймс Хілтон-Балф.)"

msgid "PEP 675: Arbitrary literal string type"
msgstr "PEP 675: довільний тип рядка літералу"

msgid ""
"The new :data:`~typing.LiteralString` annotation may be used to indicate "
"that a function parameter can be of any literal string type. This allows a "
"function to accept arbitrary literal string types, as well as strings "
"created from other literal strings. Type checkers can then enforce that "
"sensitive functions, such as those that execute SQL statements or shell "
"commands, are called only with static arguments, providing protection "
"against injection attacks."
msgstr ""
"Нову анотацію :data:`~typing.LiteralString` можна використовувати, щоб "
"вказати, що параметр функції може мати будь-який літеральний рядковий тип. "
"Це дозволяє функції приймати довільні літеральні типи рядків, а також рядки, "
"створені з інших літеральних рядків. Потім засоби перевірки типів можуть "
"забезпечити виклик конфіденційних функцій, таких як ті, що виконують "
"оператори SQL або команди оболонки, лише зі статичними аргументами, "
"забезпечуючи захист від атак ін’єкцій."

msgid "For example, a SQL query function could be annotated as follows::"
msgstr "Наприклад, функція запиту SQL може бути анотована таким чином:"

msgid "See :pep:`675` for more details."
msgstr "Дивіться :pep:`675` для більш детальної інформації."

msgid ""
"(Contributed by Jelle Zijlstra in :issue:`47088`. PEP written by Pradeep "
"Kumar Srinivasan and Graham Bleaney.)"
msgstr ""
"(Надав Джелле Зійлстра в :issue:`47088`. PEP написали Прадіп Кумар "
"Срінівасан і Грем Бліні.)"

msgid "PEP 681: Data Class Transforms"
msgstr "PEP 681: Перетворення класу даних"

msgid ""
":data:`~typing.dataclass_transform` may be used to decorate a class, "
"metaclass, or a function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class, giving it :func:"
"`dataclasses.dataclass`-like behaviors."
msgstr ""
":data:`~typing.dataclass_transform` можна використовувати для декорування "
"класу, метакласу або функції, яка сама є декоратором. Наявність "
"``@dataclass_transform()`` повідомляє засобу перевірки статичного типу, що "
"оформлений об’єкт виконує \"магію\" під час виконання, яка перетворює клас, "
"надаючи йому :func:`dataclasses.dataclass`-подібну поведінку."

msgid "For example::"
msgstr "Наприклад::"

msgid "See :pep:`681` for more details."
msgstr "Дивіться :pep:`681` для більш детальної інформації."

msgid ""
"(Contributed by Jelle Zijlstra in :gh:`91860`. PEP written by Erik De Bonte "
"and Eric Traut.)"
msgstr ""
"(Надано Jelle Zijlstra у :gh:`91860`. PEP автори Ерік Де Бонте та Ерік "
"Траут.)"

msgid "Other Language Changes"
msgstr "Інші зміни мови"

msgid ""
"Starred expressions can be used in :ref:`for statements<for>`. (See :issue:"
"`46725` for more details.)"
msgstr ""
"Вирази із зірочкою можна використовувати в :ref:`for statements <for>`. "
"(Додаткову інформацію див. :issue:`46725`.)"

msgid ""
"Asynchronous comprehensions are now allowed inside comprehensions in "
"asynchronous functions. Outer comprehensions implicitly become asynchronous. "
"(Contributed by Serhiy Storchaka in :issue:`33346`.)"
msgstr ""
"Асинхронне розуміння тепер дозволено всередині розуміння в асинхронних "
"функціях. Зовнішнє розуміння неявно стає асинхронним. (Надав Сергій Сторчака "
"в :issue:`33346`.)"

msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in :"
"meth:`contextlib.ExitStack.enter_context` and :meth:`contextlib."
"AsyncExitStack.enter_async_context` for objects which do not support the :"
"term:`context manager` or :term:`asynchronous context manager` protocols "
"correspondingly. (Contributed by Serhiy Storchaka in :issue:`44471`.)"
msgstr ""
"Помилка :exc:`TypeError` тепер виникає замість :exc:`AttributeError` у :meth:"
"`contextlib.ExitStack.enter_context` і :meth:`contextlib.AsyncExitStack."
"enter_async_context` для об’єктів, які не підтримують протоколи :term:"
"`context manager` або :term:`asynchronous context manager` відповідно. "
"(Надав Сергій Сторчака в :issue:`44471`.)"

msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in :"
"keyword:`with` and :keyword:`async with` statements for objects which do not "
"support the :term:`context manager` or :term:`asynchronous context manager` "
"protocols correspondingly. (Contributed by Serhiy Storchaka in :issue:"
"`12022`.)"
msgstr ""
"Тепер виникає :exc:`TypeError` замість :exc:`AttributeError` в операторах :"
"keyword:`with` і :keyword:`async with` для об’єктів, які не підтримують :"
"term:`context manager` або :term:`asynchronous context manager` протоколи "
"відповідно. (Надав Сергій Сторчака в :issue:`12022`.)"

msgid ""
"Added :meth:`object.__getstate__` which provides the default implementation "
"of the ``__getstate__()`` method.  :mod:`Copying <copy>` and :mod:`pickling "
"<pickle>` instances of subclasses of builtin types :class:`bytearray`, :"
"class:`set`, :class:`frozenset`, :class:`collections.OrderedDict`, :class:"
"`collections.deque`, :class:`weakref.WeakSet`, and :class:`datetime.tzinfo` "
"now copies and pickles instance attributes implemented as :term:`slots "
"<__slots__>`. (Contributed by Serhiy Storchaka in :issue:`26579`.)"
msgstr ""
"Додано :meth:`object.__getstate__`, який забезпечує стандартну реалізацію "
"методу ``__getstate__()``. :mod:`Копіювання <copy>` та :mod:`піклінг "
"<pickle>` екземплярів підкласів вбудованих типів :class:`bytearray`, :class:"
"`set`, :class:`frozenset`, :class:`collections.OrderedDict` , :class:"
"`collections.deque`, :class:`weakref.WeakSet` і :class:`datetime.tzinfo` "
"тепер копіює та маринує атрибути екземплярів, реалізовані як :term:`slots "
"<__slots__>`. (Надав Сергій Сторчака в :issue:`26579`.)"

msgid ""
"Add :option:`-P` command line option and :envvar:`PYTHONSAFEPATH` "
"environment variable to not prepend a potentially unsafe path to :data:`sys."
"path` such as the current directory, the script's directory or an empty "
"string. (Contributed by Victor Stinner in :gh:`57684`.)"
msgstr ""
"Додайте параметр командного рядка :option:`-P` і змінну середовища :envvar:"
"`PYTHONSAFEPATH`, щоб не додавати потенційно небезпечний шлях до :data:`sys."
"path`, як-от поточний каталог, каталог сценарію або порожній рядок. (Надав "
"Віктор Стіннер у :gh:`57684`.)"

msgid ""
"A ``\"z\"`` option was added to the format specification mini-language that "
"coerces negative zero to zero after rounding to the format precision.  See :"
"pep:`682` for more details.  (Contributed by John Belmonte in :gh:`90153`.)"
msgstr ""
"Опцію ``\"z\"`` було додано до міні-мови специфікації формату, яка приводить "
"негативний нуль до нуля після округлення до точності формату. Дивіться :pep:"
"`682` для більш детальної інформації. (Надав Джон Белмонте в :gh:`90153`.)"

msgid "Other CPython Implementation Changes"
msgstr "Інші зміни в реалізації CPython"

msgid ""
"Special methods :meth:`complex.__complex__` and :meth:`bytes.__bytes__` are "
"implemented to support :class:`typing.SupportsComplex` and :class:`typing."
"SupportsBytes` protocols. (Contributed by Mark Dickinson and Dong-hee Na in :"
"issue:`24234`.)"
msgstr ""
"Спеціальні методи :meth:`complex.__complex__` і :meth:`bytes.__bytes__` "
"реалізовані для підтримки протоколів :class:`typing.SupportsComplex` і :"
"class:`typing.SupportsBytes`. (Надано Марком Дікінсоном і Донг Хі На в :"
"issue:`24234`.)"

msgid ""
"``siphash13`` is added as a new internal hashing algorithms. It has similar "
"security properties as ``siphash24`` but it is slightly faster for long "
"inputs. ``str``, ``bytes``, and some other types now use it as default "
"algorithm for :func:`hash`. :pep:`552` hash-based pyc files now use "
"``siphash13``, too. (Contributed by Inada Naoki in :issue:`29410`.)"
msgstr ""
"``siphash13`` додано як новий внутрішній алгоритм хешування. Він має такі ж "
"властивості безпеки, як і ``siphash24``, але він трохи швидший для довгих "
"вводів. ``str``, ``bytes`` та деякі інші типи тепер використовують його як "
"типовий алгоритм для :func:`hash`. :pep:`552` Файли pyc на основі хешу тепер "
"також використовують ``siphash13``. (Надано Інадою Наокі в :issue:`29410`.)"

msgid ""
"When an active exception is re-raised by a :keyword:`raise` statement with "
"no parameters, the traceback attached to this exception is now always ``sys."
"exc_info()[1].__traceback__``. This means that changes made to the traceback "
"in the current :keyword:`except` clause are reflected in the re-raised "
"exception. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
"Коли активний виняток повторно викликається оператором :keyword:`raise` без "
"параметрів, зворотне відстеження, приєднане до цього винятку, тепер завжди "
"``sys.exc_info()[1].__traceback__``. Це означає, що зміни, внесені до "
"зворотного відстеження в поточному реченні :keyword:`except`, відображаються "
"у повторно створеному винятку. (Надано Іріт Катріель у :issue:`45711`.)"

msgid ""
"The interpreter state's representation of handled exceptions (a.k.a "
"exc_info, or _PyErr_StackItem) now has only the ``exc_value`` field, "
"``exc_type`` and ``exc_traceback`` have been removed as their values can be "
"derived from ``exc_value``. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
"Представлення оброблених винятків у стані інтерпретатора (так відоме як "
"exc_info або _PyErr_StackItem) тепер має лише поле ``exc_value``, "
"``exc_type`` і ``exc_traceback`` видалено, оскільки їх значення можна "
"отримати з ``exc_value``. (Надано Іріт Катріель у :issue:`45711`.)"

msgid ""
"A new command line option for the Windows installer ``AppendPath`` has been "
"added. It behaves similiar to ``PrependPath`` but appends the install and "
"scripts directories instead of prepending them. (Contributed by Bastian "
"Neuburger in :issue:`44934`.)"
msgstr ""
"Додано новий параметр командного рядка для інсталятора Windows "
"``AppendPath``. Він поводиться подібно до ``PrependPath``, але додає "
"каталоги install і scripts замість того, щоб додавати їх. (Надав Бастіан "
"Нойбургер у :issue:`44934`.)"

msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to 1 "
"for initialization to use :c:member:`PyConfig.module_search_paths` to "
"initialize :data:`sys.path`. Otherwise, initialization will recalculate the "
"path and replace any values added to ``module_search_paths``."
msgstr ""
"Поле :c:member:`PyConfig.module_search_paths_set` тепер має бути встановлено "
"на 1 для ініціалізації, щоб використовувати :c:member:`PyConfig."
"module_search_paths` для ініціалізації :data:`sys.path`. В іншому випадку "
"ініціалізація перерахує шлях і замінить будь-які значення, додані до "
"``module_search_paths``."

msgid "New Modules"
msgstr "Нові модулі"

msgid ""
"A new module, :mod:`tomllib`, was added for parsing TOML. (Contributed by "
"Taneli Hukkinen in :issue:`40059`.)"
msgstr ""
"Для аналізу TOML додано новий модуль :mod:`tomllib`. (Надано Танелі Хуккінен "
"у :issue:`40059`.)"

msgid ""
":mod:`wsgiref.types`, containing WSGI-specific types for static type "
"checking, was added. (Contributed by Sebastian Rittau in :issue:`42012`.)"
msgstr ""
"Додано :mod:`wsgiref.types`, що містить специфічні для WSGI типи для "
"перевірки статичних типів. (Надав Себастьян Ріттау в :issue:`42012`.)"

msgid "Improved Modules"
msgstr "Покращені модулі"

msgid "asyncio"
msgstr "asyncio"

msgid ""
"Add raw datagram socket functions to the event loop: :meth:`~asyncio."
"AbstractEventLoop.sock_sendto`, :meth:`~asyncio.AbstractEventLoop."
"sock_recvfrom` and :meth:`~asyncio.AbstractEventLoop.sock_recvfrom_into`. "
"(Contributed by Alex Grönholm in :issue:`46805`.)"
msgstr ""
"Додайте необроблені функції сокетів дейтаграм до циклу подій: :meth:"
"`~asyncio.AbstractEventLoop.sock_sendto`, :meth:`~asyncio.AbstractEventLoop."
"sock_recvfrom` і :meth:`~asyncio.AbstractEventLoop.sock_recvfrom_into`. "
"(Надав Алекс Грьонхольм у :issue:`46805`.)"

msgid ""
"Add :meth:`~asyncio.streams.StreamWriter.start_tls` method for upgrading "
"existing stream-based connections to TLS. (Contributed by Ian Good in :issue:"
"`34975`.)"
msgstr ""
"Додайте метод :meth:`~asyncio.streams.StreamWriter.start_tls` для оновлення "
"існуючих з’єднань на основі потоку до TLS. (Надав Ян Гуд у :issue:`34975`.)"

msgid ""
"Add :class:`~asyncio.Barrier` class to the synchronization primitives of the "
"asyncio library. (Contributed by Yves Duprat and Andrew Svetlov in :gh:"
"`87518`.)"
msgstr ""
"Додайте клас :class:`~asyncio.Barrier` до примітивів синхронізації "
"бібліотеки asyncio. (Надано Івом Дюпра та Ендрю Свєтловим у :gh:`87518`.)"

msgid "datetime"
msgstr "дата, час"

msgid ""
"Add :attr:`datetime.UTC`, a convenience alias for :attr:`datetime.timezone."
"utc`. (Contributed by Kabir Kwatra in :gh:`91973`.)"
msgstr ""
"Додайте :attr:`datetime.UTC`, зручний псевдонім для :attr:`datetime.timezone."
"utc`. (Надав Кабір Кватра в :gh:`91973`.)"

msgid ""
":meth:`datetime.date.fromisoformat`, :meth:`datetime.time.fromisoformat` "
"and :meth:`datetime.datetime.fromisoformat` can now be used to parse most "
"ISO 8601 formats (barring only those that support fractional hours and "
"minutes). (Contributed by Paul Ganssle in :gh:`80010`.)"
msgstr ""
":meth:`datetime.date.fromisoformat`, :meth:`datetime.time.fromisoformat` і :"
"meth:`datetime.datetime.fromisoformat` тепер можна використовувати для "
"аналізу більшості форматів ISO 8601 (за винятком тих, які підтримують "
"дробові години). і хвилини). (Надав Пол Ганссле в :gh:`80010`.)"

msgid "fractions"
msgstr "частки"

msgid ""
"Support :PEP:`515`-style initialization of :class:`~fractions.Fraction` from "
"string.  (Contributed by Sergey B Kirpichev in :issue:`44258`.)"
msgstr ""
"Підтримка :PEP:`515`-стилю ініціалізації :class:`~fractions.Fraction` із "
"рядка. (Надав Сергій Кірпічев у :issue:`44258`.)"

msgid ""
":class:`~fractions.Fraction` now implements an ``__int__`` method, so that "
"an ``isinstance(some_fraction, typing.SupportsInt)`` check passes. "
"(Contributed by Mark Dickinson in :issue:`44547`.)"
msgstr ""
":class:`~fractions.Fraction` тепер реалізує метод ``__int__``, щоб перевірка "
"``isinstance(some_fraction, typing.SupportsInt)`` проходила. (Надав Марк "
"Дікінсон у :issue:`44547`.)"

msgid "functools"
msgstr "functools"

msgid ""
":func:`functools.singledispatch` now supports :data:`types.UnionType` and :"
"data:`typing.Union` as annotations to the dispatch argument.::"
msgstr ""
":func:`functools.singledispatch` тепер підтримує :data:`types.UnionType` і :"
"data:`typing.Union` як анотації до аргументу dispatch.::"

msgid "(Contributed by Yurii Karabas in :issue:`46014`.)"
msgstr "(Надав Юрій Карабас у :issue:`46014`.)"

msgid "hashlib"
msgstr "хешліб"

msgid ""
":func:`hashlib.blake2b` and :func:`hashlib.blake2s` now prefer `libb2`_ over "
"Python's vendored copy. (Contributed by Christian Heimes in :issue:`47095`.)"
msgstr ""
":func:`hashlib.blake2b` і :func:`hashlib.blake2s` тепер віддають перевагу "
"`libb2`_ над копією постачальника Python. (Надав Крістіан Хеймс у :issue:"
"`47095`.)"

msgid ""
"The internal ``_sha3`` module with SHA3 and SHAKE algorithms now uses "
"*tiny_sha3* instead of the *Keccak Code Package* to reduce code and binary "
"size. The :mod:`hashlib` module prefers optimized SHA3 and SHAKE "
"implementations from OpenSSL. The change affects only installations without "
"OpenSSL support. (Contributed by Christian Heimes in :issue:`47098`.)"
msgstr ""
"Внутрішній модуль ``_sha3`` з алгоритмами SHA3 і SHAKE тепер використовує "
"*tiny_sha3* замість *Keccak Code Package*, щоб зменшити код і двійковий "
"розмір. Модуль :mod:`hashlib` надає перевагу оптимізованим реалізаціям SHA3 "
"і SHAKE з OpenSSL. Зміна стосується лише встановлення без підтримки OpenSSL. "
"(Надав Крістіан Хеймс у :issue:`47098`.)"

msgid "IDLE and idlelib"
msgstr "IDLE і idlelib"

msgid ""
"Apply syntax highlighting to `.pyi` files. (Contributed by Alex Waygood and "
"Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"Застосуйте підсвічування синтаксису до файлів `.pyi`. (Надано Алексом "
"Вейгудом і Террі Джен Ріді в :issue:`45447`.)"

msgid "inspect"
msgstr "оглядати"

msgid ""
"Add :func:`inspect.getmembers_static`: return all members without triggering "
"dynamic lookup via the descriptor protocol. (Contributed by Weipeng Hong in :"
"issue:`30533`.)"
msgstr ""
"Додайте :func:`inspect.getmembers_static`: повертає всіх учасників без "
"запуску динамічного пошуку через протокол дескриптора. (Надано Weipeng Hong "
"у :issue:`30533`.)"

msgid ""
"Add :func:`inspect.ismethodwrapper` for checking if the type of an object is "
"a :class:`~types.MethodWrapperType`. (Contributed by Hakan Çelik in :issue:"
"`29418`.)"
msgstr ""
"Додайте :func:`inspect.ismethodwrapper` для перевірки, чи є тип об’єкта :"
"class:`~types.MethodWrapperType`. (Надав Хакан Челік у :issue:`29418`.)"

msgid ""
"Change the frame-related functions in the :mod:`inspect` module to return a "
"regular object (that is backwards compatible with the old tuple-like "
"interface) that include the extended :pep:`657` position information (end "
"line number, column and end column). The affected functions are: :func:"
"`inspect.getframeinfo`, :func:`inspect.getouterframes`, :func:`inspect."
"getinnerframes`, :func:`inspect.stack` and :func:`inspect.trace`. "
"(Contributed by Pablo Galindo in :gh:`88116`)"
msgstr ""
"Змініть пов’язані з фреймами функції в модулі :mod:`inspect`, щоб повертати "
"звичайний об’єкт (який має зворотну сумісність зі старим кортежним "
"інтерфейсом), який містить розширену інформацію про позицію :pep:`657` "
"(номер кінця рядка, колонка та кінцева колонка). Це стосується таких "
"функцій: :func:`inspect.getframeinfo`, :func:`inspect.getouterframes`, :func:"
"`inspect.getinnerframes`, :func:`inspect.stack` і :func:`inspect.trace`. "
"(Надав Пабло Галіндо в :gh:`88116`)"

msgid "locale"
msgstr "локаль"

msgid ""
"Add :func:`locale.getencoding` to get the current locale encoding. It is "
"similar to ``locale.getpreferredencoding(False)`` but ignores the :ref:"
"`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"Додайте :func:`locale.getencoding`, щоб отримати поточне кодування мови. Він "
"схожий на ``locale.getpreferredencoding(False)``, але ігнорує :ref:`Режим "
"Python UTF-8 <utf8-mode>`."

msgid "math"
msgstr "математика"

msgid ""
"Add :func:`math.exp2`: return 2 raised to the power of x. (Contributed by "
"Gideon Mitchell in :issue:`45917`.)"
msgstr ""
"Додати :func:`math.exp2`: повернути 2 у степені x. (Надав Гідеон Мітчелл у :"
"issue:`45917`.)"

msgid ""
"Add :func:`math.cbrt`: return the cube root of x. (Contributed by Ajith "
"Ramachandran in :issue:`44357`.)"
msgstr ""
"Add :func:`math.cbrt`: повертає кубічний корінь з x. (Надав Аджит "
"Рамачандран у :issue:`44357`.)"

msgid ""
"The behaviour of two :func:`math.pow` corner cases was changed, for "
"consistency with the IEEE 754 specification. The operations ``math.pow(0.0, -"
"math.inf)`` and ``math.pow(-0.0, -math.inf)`` now return ``inf``. Previously "
"they raised :exc:`ValueError`. (Contributed by Mark Dickinson in :issue:"
"`44339`.)"
msgstr ""
"Поведінку двох кутових випадків :func:`math.pow` було змінено для "
"узгодженості зі специфікацією IEEE 754. Операції ``math.pow(0.0, -math."
"inf)`` і ``math.pow(-0.0, -math.inf)`` тепер повертають ``inf``. Раніше вони "
"викликали :exc:`ValueError`. (Надав Марк Дікінсон у :issue:`44339`.)"

msgid ""
"The :data:`math.nan` value is now always available. (Contributed by Victor "
"Stinner in :issue:`46917`.)"
msgstr ""
"Значення :data:`math.nan` тепер завжди доступне. (Надав Віктор Стіннер у :"
"issue:`46917`.)"

msgid "operator"
msgstr "оператор"

msgid ""
"A new function ``operator.call`` has been added, such that ``operator."
"call(obj, *args, **kwargs) == obj(*args, **kwargs)``. (Contributed by Antony "
"Lee in :issue:`44019`.)"
msgstr ""
"Додано нову функцію ``operator.call``, так що ``operator.call(obj, *args, "
"**kwargs) == obj(*args, **kwargs)``. (Надав Ентоні Лі в :issue:`44019`.)"

msgid "os"
msgstr "ос"

msgid ""
"On Windows, :func:`os.urandom` now uses ``BCryptGenRandom()``, instead of "
"``CryptGenRandom()`` which is deprecated. (Contributed by Dong-hee Na in :"
"issue:`44611`.)"
msgstr ""
"У Windows :func:`os.urandom` тепер використовує ``BCryptGenRandom()`` "
"замість ``CryptGenRandom()``, який є застарілим. (Надав Dong-hee Na у :issue:"
"`44611`.)"

msgid "pathlib"
msgstr "pathlib"

msgid ""
":meth:`~pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` return only "
"directories if *pattern* ends with a pathname components separator: :data:"
"`~os.sep` or :data:`~os.altsep`. (Contributed by Eisuke Kawasima in :issue:"
"`22276` and :issue:`33392`.)"
msgstr ""
":meth:`~pathlib.Path.glob` і :meth:`~pathlib.Path.rglob` повертають лише "
"каталоги, якщо *шаблон* закінчується роздільником компонентів шляху: :data:"
"`~os.sep` або :data:`~ос.альцеп`. (Надав Ейсуке Кавасіма в :issue:`22276` і :"
"issue:`33392`.)"

msgid "re"
msgstr "повторно"

msgid ""
"Atomic grouping (``(?>...)``) and possessive quantifiers (``*+``, ``++``, ``?"
"+``, ``{m,n}+``) are now supported in regular expressions. (Contributed by "
"Jeffrey C. Jacobs and Serhiy Storchaka in :issue:`433030`.)"
msgstr ""
"Атомарне групування (``(?>...)`` і присвійні квантори (``*+``, ``++``, ``?"
"+``, ``{m,n}+`` ) тепер підтримуються регулярними виразами. (Надано Джеффрі "
"К. Джейкобсом і Сергієм Сторчакою в :issue:`433030`.)"

msgid "shutil"
msgstr "шутил"

msgid ""
"Add optional parameter *dir_fd* in :func:`shutil.rmtree`. (Contributed by "
"Serhiy Storchaka in :issue:`46245`.)"
msgstr ""
"Додайте необов’язковий параметр *dir_fd* у :func:`shutil.rmtree`. (Надав "
"Сергій Сторчака в :issue:`46245`.)"

msgid "socket"
msgstr "гніздо"

msgid ""
"Add CAN Socket support for NetBSD. (Contributed by Thomas Klausner in :issue:"
"`30512`.)"
msgstr ""
"Додайте підтримку CAN Socket для NetBSD. (Надав Томас Клаузнер у :issue:"
"`30512`.)"

msgid ""
":meth:`~socket.create_connection` has an option to raise, in case of failure "
"to connect, an :exc:`ExceptionGroup` containing all errors instead of only "
"raising the last error. (Contributed by Irit Katriel in :issue:`29980`)."
msgstr ""
":meth:`~socket.create_connection` має опцію викликати, у разі невдачі "
"підключення, :exc:`ExceptionGroup`, що містить усі помилки, замість того, "
"щоб викликати лише останню помилку. (Надано Іріт Катріель у :issue:`29980`)."

msgid "sqlite3"
msgstr "sqlite3"

msgid ""
"You can now disable the authorizer by passing :const:`None` to :meth:"
"`~sqlite3.Connection.set_authorizer`. (Contributed by Erlend E. Aasland in :"
"issue:`44491`.)"
msgstr ""
"Тепер ви можете вимкнути авторизатор, передавши :const:`None` до :meth:"
"`~sqlite3.Connection.set_authorizer`. (Надав Erlend E. Aasland у :issue:"
"`44491`.)"

msgid ""
"Collation name :meth:`~sqlite3.Connection.create_collation` can now contain "
"any Unicode character.  Collation names with invalid characters now raise :"
"exc:`UnicodeEncodeError` instead of :exc:`sqlite3.ProgrammingError`. "
"(Contributed by Erlend E. Aasland in :issue:`44688`.)"
msgstr ""
"Назва сортування :meth:`~sqlite3.Connection.create_collation` тепер може "
"містити будь-який символ Юнікоду. Назви зіставлення з недійсними символами "
"тепер викликають :exc:`UnicodeEncodeError` замість :exc:`sqlite3."
"ProgrammingError`. (Надав Erlend E. Aasland у :issue:`44688`.)"

msgid ""
":mod:`sqlite3` exceptions now include the SQLite extended error code as :"
"attr:`~sqlite3.Error.sqlite_errorcode` and the SQLite error name as :attr:"
"`~sqlite3.Error.sqlite_errorname`. (Contributed by Aviv Palivoda, Daniel "
"Shahaf, and Erlend E. Aasland in :issue:`16379` and :issue:`24139`.)"
msgstr ""
"Винятки :mod:`sqlite3` тепер включають розширений код помилки SQLite як :"
"attr:`~sqlite3.Error.sqlite_errorcode` та назву помилки SQLite як :attr:"
"`~sqlite3.Error.sqlite_errorname`. (Надано Авівом Паливода, Даніелем Шахафом "
"і Ерлендом Е. Асландом у :issue:`16379` і :issue:`24139`.)"

msgid ""
"Add :meth:`~sqlite3.Connection.setlimit` and :meth:`~sqlite3.Connection."
"getlimit` to :class:`sqlite3.Connection` for setting and getting SQLite "
"limits by connection basis. (Contributed by Erlend E. Aasland in :issue:"
"`45243`.)"
msgstr ""
"Додайте :meth:`~sqlite3.Connection.setlimit` і :meth:`~sqlite3.Connection."
"getlimit` до :class:`sqlite3.Connection` для встановлення та отримання "
"обмежень SQLite за підключенням. (Надав Erlend E. Aasland у :issue:`45243`.)"

msgid ""
":mod:`sqlite3` now sets :attr:`sqlite3.threadsafety` based on the default "
"threading mode the underlying SQLite library has been compiled with. "
"(Contributed by Erlend E. Aasland in :issue:`45613`.)"
msgstr ""
":mod:`sqlite3` тепер встановлює :attr:`sqlite3.threadsafety` на основі "
"режиму потоків за замовчуванням, з яким скомпільовано базову бібліотеку "
"SQLite. (Надав Erlend E. Aasland у :issue:`45613`.)"

msgid ""
":mod:`sqlite3` C callbacks now use unraisable exceptions if callback "
"tracebacks are enabled. Users can now register an :func:`unraisable hook "
"handler <sys.unraisablehook>` to improve their debug experience. "
"(Contributed by Erlend E. Aasland in :issue:`45828`.)"
msgstr ""
":mod:`sqlite3` Зворотні виклики C тепер використовують неможливі винятки, "
"якщо ввімкнено зворотні виклики. Тепер користувачі можуть зареєструвати :"
"func:`unraisable hook handler <sys.unraisablehook>`, щоб покращити свій "
"досвід налагодження. (Надав Erlend E. Aasland у :issue:`45828`.)"

msgid ""
"Fetch across rollback no longer raises :exc:`~sqlite3.InterfaceError`. "
"Instead we leave it to the SQLite library to handle these cases. "
"(Contributed by Erlend E. Aasland in :issue:`44092`.)"
msgstr ""
"Fetch through rollback більше не викликає :exc:`~sqlite3.InterfaceError`. "
"Замість цього ми залишаємо обробку цих випадків бібліотеці SQLite. (Надав "
"Erlend E. Aasland у :issue:`44092`.)"

msgid ""
"Add :meth:`~sqlite3.Connection.serialize` and :meth:`~sqlite3.Connection."
"deserialize` to :class:`sqlite3.Connection` for serializing and "
"deserializing databases. (Contributed by Erlend E. Aasland in :issue:"
"`41930`.)"
msgstr ""
"Додайте :meth:`~sqlite3.Connection.serialize` і :meth:`~sqlite3.Connection."
"deserialize` до :class:`sqlite3.Connection` для серіалізації та "
"десеріалізації баз даних. (Надано Erlend E. Aasland у :issue:`41930`.)"

msgid ""
"Add :meth:`~sqlite3.Connection.create_window_function` to :class:`sqlite3."
"Connection` for creating aggregate window functions. (Contributed by Erlend "
"E. Aasland in :issue:`34916`.)"
msgstr ""
"Додайте :meth:`~sqlite3.Connection.create_window_function` до :class:"
"`sqlite3.Connection` для створення агрегованих віконних функцій. (Надав "
"Erlend E. Aasland у :issue:`34916`.)"

msgid ""
"Add :meth:`~sqlite3.Connection.blobopen` to :class:`sqlite3.Connection`. :"
"class:`sqlite3.Blob` allows incremental I/O operations on blobs. "
"(Contributed by Aviv Palivoda and Erlend E. Aasland in :issue:`24905`)"
msgstr ""
"Додайте :meth:`~sqlite3.Connection.blobopen` до :class:`sqlite3."
"Connection`. :class:`sqlite3.Blob` дозволяє інкрементні операції вводу/"
"виводу над великими об'єктами. (Надано Aviv Palivoda та Erlend E. Aasland у :"
"issue:`24905`)"

msgid "sys"
msgstr "система"

msgid ""
":func:`sys.exc_info` now derives the ``type`` and ``traceback`` fields from "
"the ``value`` (the exception instance), so when an exception is modified "
"while it is being handled, the changes are reflected in the results of "
"subsequent calls to :func:`exc_info`. (Contributed by Irit Katriel in :issue:"
"`45711`.)"
msgstr ""
":func:`sys.exc_info` тепер отримує поля ``type`` і ``traceback`` із "
"``value`` (екземпляр винятку), тому, коли виняток змінюється під час його "
"обробки, зміни відображаються в результатах наступних викликів :func:"
"`exc_info`. (Надано Іріт Катріель у :issue:`45711`.)"

msgid ""
"Add :func:`sys.exception` which returns the active exception instance "
"(equivalent to ``sys.exc_info()[1]``). (Contributed by Irit Katriel in :"
"issue:`46328`.)"
msgstr ""
"Додайте :func:`sys.exception`, який повертає екземпляр активного винятку "
"(еквівалент ``sys.exc_info()[1]``). (Надано Іріт Катріель у :issue:`46328`.)"

msgid ""
"Add the :data:`sys.flags.safe_path <sys.flags>` flag. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""
"Додайте позначку :data:`sys.flags.safe_path <sys.flags>`. (Надав Віктор "
"Стіннер у :gh:`57684`.)"

msgid "sysconfig"
msgstr "sysconfig"

msgid ""
"Two new :ref:`installation schemes <installation_paths>` (*posix_venv*, "
"*nt_venv* and *venv*) were added and are used when Python creates new "
"virtual environments or when it is running from a virtual environment. The "
"first two schemes (*posix_venv* and *nt_venv*) are OS-specific for non-"
"Windows and Windows, the *venv* is essentially an alias to one of them "
"according to the OS Python runs on. This is useful for downstream "
"distributors who modify :func:`sysconfig.get_preferred_scheme`. Third party "
"code that creates new virtual environments should use the new *venv* "
"installation scheme to determine the paths, as does :mod:`venv`. "
"(Contributed by Miro Hrončok in :issue:`45413`.)"
msgstr ""
"Додано дві нові :ref:`схеми встановлення <installation_paths>` "
"(*posix_venv*, *nt_venv* і *venv*), які використовуються, коли Python "
"створює нові віртуальні середовища або коли він працює з віртуального "
"середовища. Перші дві схеми (*posix_venv* і *nt_venv*) є специфічними для ОС "
"не-Windows і Windows, *venv* по суті є псевдонімом однієї з них відповідно "
"до ОС, на якій працює Python. Це корисно для дистриб’юторів нижнього рівня, "
"які змінюють :func:`sysconfig.get_preferred_scheme`. Код третьої сторони, "
"який створює нові віртуальні середовища, має використовувати нову схему "
"встановлення *venv* для визначення шляхів, як це робить :mod:`venv`. (Надав "
"Міро Хрончок у :issue:`45413`.)"

msgid "threading"
msgstr "різьблення"

msgid ""
"On Unix, if the ``sem_clockwait()`` function is available in the C library "
"(glibc 2.30 and newer), the :meth:`threading.Lock.acquire` method now uses "
"the monotonic clock (:data:`time.CLOCK_MONOTONIC`) for the timeout, rather "
"than using the system clock (:data:`time.CLOCK_REALTIME`), to not be "
"affected by system clock changes. (Contributed by Victor Stinner in :issue:"
"`41710`.)"
msgstr ""
"В Unix, якщо функція ``sem_clockwait()`` доступна в бібліотеці C (glibc 2.30 "
"і новіша версія), метод :meth:`threading.Lock.acquire` тепер використовує "
"монотонний годинник (:data:`time. CLOCK_MONOTONIC`) для тайм-ауту, замість "
"використання системного годинника (:data:`time.CLOCK_REALTIME`), щоб на "
"нього не впливали зміни системного годинника. (Надав Віктор Стіннер у :issue:"
"`41710`.)"

msgid "time"
msgstr "час"

msgid ""
"On Unix, :func:`time.sleep` now uses the ``clock_nanosleep()`` or "
"``nanosleep()`` function, if available, which has a resolution of 1 "
"nanosecond (10\\ :sup:`-9` seconds), rather than using ``select()`` which "
"has a resolution of 1 microsecond (10\\ :sup:`-6` seconds). (Contributed by "
"Benjamin Szőke and Victor Stinner in :issue:`21302`.)"
msgstr ""
"В Unix :func:`time.sleep` тепер використовує функцію ``clock_nanosleep()`` "
"або ``nanosleep()``, якщо вона доступна, яка має роздільну здатність 1 "
"наносекунду (10\\ :sup:`-9` секунд), замість використання ``select()``, який "
"має роздільну здатність 1 мікросекунду (10\\ :sup:`-6` секунд). (Надано "
"Бенджаміном Секе та Віктором Стіннером у :issue:`21302`.)"

msgid ""
"On Windows 8.1 and newer, :func:`time.sleep` now uses a waitable timer based "
"on `high-resolution timers <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/kernel/high-resolution-timers>`_ which has a resolution of "
"100 nanoseconds (10\\ :sup:`-7` seconds). Previously, it had a resolution of "
"1 millisecond (10\\ :sup:`-3` seconds). (Contributed by Benjamin Szőke, Dong-"
"hee Na, Eryk Sun and Victor Stinner in :issue:`21302` and :issue:`45429`.)"
msgstr ""
"У Windows 8.1 і новіших версіях :func:`time.sleep` тепер використовує таймер "
"очікування на основі `таймерів високої роздільної здатності <https://docs."
"microsoft.com/en-us/windows-hardware/drivers/kernel/high-resolution-"
"timers>`_, який має роздільну здатність 100 наносекунд (10\\ :sup:`-7` "
"секунд). Раніше він мав роздільну здатність 1 мілісекунду (10\\ :sup:`-3` "
"секунди). (Надано Benjamin Szőke, Dong-hee Na, Eryk Sun і Victor Stinner у :"
"issue:`21302` і :issue:`45429`.)"

msgid "typing"
msgstr "введення тексту"

msgid "For major changes, see :ref:`new-feat-related-type-hints-311`."
msgstr "Для основних змін див. :ref:`new-feat-related-type-hints-311`."

msgid ""
"Add :func:`typing.assert_never` and :class:`typing.Never`. :func:`typing."
"assert_never` is useful for asking a type checker to confirm that a line of "
"code is not reachable. At runtime, it raises an :exc:`AssertionError`. "
"(Contributed by Jelle Zijlstra in :gh:`90633`.)"
msgstr ""
"Додайте :func:`typing.assert_never` і :class:`typing.Never`. :func:`typing."
"assert_never` корисний для запиту перевірки типу, щоб підтвердити, що рядок "
"коду недоступний. Під час виконання він викликає :exc:`AssertionError`. "
"(Надано Jelle Zijlstra у :gh:`90633`.)"

msgid ""
"Add :func:`typing.reveal_type`. This is useful for asking a type checker "
"what type it has inferred for a given expression. At runtime it prints the "
"type of the received value. (Contributed by Jelle Zijlstra in :gh:`90572`.)"
msgstr ""
"Додайте :func:`typing.reveal_type`. Це корисно, щоб запитати засіб перевірки "
"типів, який тип він вивів для даного виразу. Під час виконання він друкує "
"тип отриманого значення. (Надано Jelle Zijlstra у :gh:`90572`.)"

msgid ""
"Add :func:`typing.assert_type`. This is useful for asking a type checker to "
"confirm that the type it has inferred for a given expression matches the "
"given type. At runtime it simply returns the received value. (Contributed by "
"Jelle Zijlstra in :gh:`90638`.)"
msgstr ""
"Додайте :func:`typing.assert_type`. Це корисно для того, щоб попросити засіб "
"перевірки типів підтвердити, що тип, який він вивів для даного виразу, "
"відповідає заданому типу. Під час виконання він просто повертає отримане "
"значення. (Надано Jelle Zijlstra у :gh:`90638`.)"

msgid ""
":data:`typing.TypedDict` types can now be generic. (Contributed by Samodya "
"Abeysiriwardane in :gh:`89026`.)"
msgstr ""
"Типи :data:`typing.TypedDict` тепер можуть бути загальними. (Надано Samodya "
"Abeysiriwardane у :gh:`89026`.)"

msgid ""
":class:`~typing.NamedTuple` types can now be generic. (Contributed by Serhiy "
"Storchaka in :issue:`43923`.)"
msgstr ""
"Типи :class:`~typing.NamedTuple` тепер можуть бути загальними. (Надав Сергій "
"Сторчака в :issue:`43923`.)"

msgid ""
"Allow subclassing of :class:`typing.Any`. This is useful for avoiding type "
"checker errors related to highly dynamic class, such as mocks. (Contributed "
"by Shantanu Jain in :gh:`91154`.)"
msgstr ""
"Дозволити підкласи :class:`typing.Any`. Це корисно для уникнення помилок "
"перевірки типу, пов’язаних із високодинамічним класом, таким як mocks. "
"(Надав Шантану Джайн у :gh:`91154`.)"

msgid ""
"The :func:`typing.final` decorator now sets the ``__final__`` attributed on "
"the decorated object. (Contributed by Jelle Zijlstra in :gh:`90500`.)"
msgstr ""
"Декоратор :func:`typing.final` тепер встановлює атрибут ``__final__`` для "
"декорованого об’єкта. (Надано Jelle Zijlstra у :gh:`90500`.)"

msgid ""
"The :func:`typing.get_overloads` function can be used for introspecting the "
"overloads of a function. :func:`typing.clear_overloads` can be used to clear "
"all registered overloads of a function. (Contributed by Jelle Zijlstra in :"
"gh:`89263`.)"
msgstr ""
"Функцію :func:`typing.get_overloads` можна використовувати для самоаналізу "
"перевантажень функції. :func:`typing.clear_overloads` можна використовувати "
"для очищення всіх зареєстрованих перевантажень функції. (Надано Jelle "
"Zijlstra у :gh:`89263`.)"

msgid ""
"The :meth:`__init__` method of :class:`~typing.Protocol` subclasses is now "
"preserved. (Contributed by Adrian Garcia Badarasco in :gh:`88970`.)"
msgstr ""
"Метод :meth:`__init__` підкласів :class:`~typing.Protocol` тепер збережено. "
"(Надано Адріаном Гарсіа Бадараско в :gh:`88970`.)"

msgid ""
"The representation of empty tuple types (``Tuple[()]``) is simplified. This "
"affects introspection, e.g. ``get_args(Tuple[()])`` now evaluates to ``()`` "
"instead of ``((),)``. (Contributed by Serhiy Storchaka in :gh:`91137`.)"
msgstr ""
"Представлення порожніх типів кортежів (``Tuple[()]``) спрощено. Це впливає "
"на самоаналіз, напр. ``get_args(Tuple[()])`` тепер обчислюється як ``()`` "
"замість ``((),)``. (Надав Сергій Сторчака в :gh:`91137`.)"

msgid ""
"Loosen runtime requirements for type annotations by removing the callable "
"check in the private ``typing._type_check`` function. (Contributed by "
"Gregory Beauregard in :gh:`90802`.)"
msgstr ""
"Послабте вимоги до часу виконання для анотацій типу, видаливши перевірку, що "
"викликається, у приватній функції ``typing._type_check``. (Надав Грегорі "
"Борегард у :gh:`90802`.)"

msgid ""
":func:`typing.get_type_hints` now supports evaluating strings as forward "
"references in :ref:`PEP 585 generic aliases <types-genericalias>`. "
"(Contributed by Niklas Rosenstein in :gh:`85542`.)"
msgstr ""
":func:`typing.get_type_hints` тепер підтримує обчислення рядків як прямих "
"посилань у :ref:`загальних псевдонімах PEP 585 <types-genericalias>`. (Надав "
"Ніклас Розенштейн у :gh:`85542`.)"

msgid ""
":func:`typing.get_type_hints` no longer adds :data:`~typing.Optional` to "
"parameters with ``None`` as a default. (Contributed by Nikita Sobolev in :gh:"
"`90353`.)"
msgstr ""
":func:`typing.get_type_hints` більше не додає :data:`~typing.Optional` до "
"параметрів із ``None`` за замовчуванням. (Надав Микита Соболєв у :gh:"
"`90353`.)"

msgid ""
":func:`typing.get_type_hints` now supports evaluating bare stringified :data:"
"`~typing.ClassVar` annotations. (Contributed by Gregory Beauregard in :gh:"
"`90711`.)"
msgstr ""
":func:`typing.get_type_hints` тепер підтримує оцінку голих рядкових :data:"
"`~typing.ClassVar` анотацій. (Надав Грегорі Борегард у :gh:`90711`.)"

msgid ""
":func:`typing.no_type_check` no longer modifies external classes and "
"functions. It also now correctly marks classmethods as not to be type "
"checked. (Contributed by Nikita Sobolev in :gh:`90729`.)"
msgstr ""
":func:`typing.no_type_check` більше не змінює зовнішні класи та функції. "
"Тепер він також правильно позначає методи класу як такі, що не підлягають "
"перевірці типу. (Надав Микита Соболєв у :gh:`90729`.)"

msgid "tkinter"
msgstr "tkinter"

msgid ""
"Added method ``info_patchlevel()`` which returns the exact version of the "
"Tcl library as a named tuple similar to :data:`sys.version_info`. "
"(Contributed by Serhiy Storchaka in :gh:`91827`.)"
msgstr ""
"Додано метод ``info_patchlevel()``, який повертає точну версію бібліотеки "
"Tcl як іменований кортеж, схожий на :data:`sys.version_info`. (Надав Сергій "
"Сторчака в :gh:`91827`.)"

msgid "unicodedata"
msgstr "unicodedata"

msgid ""
"The Unicode database has been updated to version 14.0.0. (:issue:`45190`)."
msgstr "Базу даних Unicode оновлено до версії 14.0.0. (:issue:`45190`)."

msgid "unittest"
msgstr "unittest"

msgid ""
"Added methods :meth:`~unittest.TestCase.enterContext` and :meth:`~unittest."
"TestCase.enterClassContext` of class :class:`~unittest.TestCase`, method :"
"meth:`~unittest.IsolatedAsyncioTestCase.enterAsyncContext` of class :class:"
"`~unittest.IsolatedAsyncioTestCase` and function :func:`unittest."
"enterModuleContext`. (Contributed by Serhiy Storchaka in :issue:`45046`.)"
msgstr ""
"Додано методи :meth:`~unittest.TestCase.enterContext` і :meth:`~unittest."
"TestCase.enterClassContext` класу :class:`~unittest.TestCase`, метод :meth:"
"`~unittest.IsolatedAsyncioTestCase.enterAsyncContext` клас :class:`~unittest."
"IsolatedAsyncioTestCase` і функція :func:`unittest.enterModuleContext`. "
"(Надав Сергій Сторчака в :issue:`45046`.)"

msgid "venv"
msgstr "venv"

msgid ""
"When new Python virtual environments are created, the *venv* :ref:`sysconfig "
"installation scheme <installation_paths>` is used to determine the paths "
"inside the environment. When Python runs in a virtual environment, the same "
"installation scheme is the default. That means that downstream distributors "
"can change the default sysconfig install scheme without changing behavior of "
"virtual environments. Third party code that also creates new virtual "
"environments should do the same. (Contributed by Miro Hrončok in :issue:"
"`45413`.)"
msgstr ""
"Коли створюються нові віртуальні середовища Python, *venv* :ref:`sysconfig "
"схема встановлення <installation_paths>` використовується для визначення "
"шляхів усередині середовища. Коли Python працює у віртуальному середовищі, "
"стандартною є та сама схема встановлення. Це означає, що подальші "
"розповсюджувачі можуть змінити схему встановлення sysconfig за умовчанням, "
"не змінюючи поведінку віртуальних середовищ. Код третьої сторони, який також "
"створює нові віртуальні середовища, повинен робити те саме. (Надав Міро "
"Хрончок у :issue:`45413`.)"

msgid "warnings"
msgstr "попередження"

msgid ""
":func:`warnings.catch_warnings` now accepts arguments for :func:`warnings."
"simplefilter`, providing a more concise way to locally ignore warnings or "
"convert them to errors. (Contributed by Zac Hatfield-Dodds in :issue:"
"`47074`.)"
msgstr ""
":func:`warnings.catch_warnings` тепер приймає аргументи для :func:`warnings."
"simplefilter`, надаючи більш стислий спосіб локально ігнорувати попередження "
"або перетворювати їх на помилки. (Надав Зак Хетфілд-Доддс у :issue:`47074`.)"

msgid "zipfile"
msgstr "zip-файл"

msgid ""
"Added support for specifying member name encoding for reading metadata in "
"the zipfile's directory and file headers. (Contributed by Stephen J. "
"Turnbull and Serhiy Storchaka in :issue:`28080`.)"
msgstr ""
"Додано підтримку визначення кодування імені члена для читання метаданих у "
"каталозі та заголовках файлів zip. (Надано Стівеном Дж. Тернбуллом і Сергієм "
"Сторчакою в :issue:`28080`.)"

msgid "fcntl"
msgstr "fcntl"

msgid ""
"On FreeBSD, the :attr:`F_DUP2FD` and :attr:`F_DUP2FD_CLOEXEC` flags "
"respectively are supported, the former equals to ``dup2`` usage while the "
"latter set the ``FD_CLOEXEC`` flag in addition."
msgstr ""
"У FreeBSD підтримуються прапорці :attr:`F_DUP2FD` і :attr:`F_DUP2FD_CLOEXEC` "
"відповідно, перший дорівнює використанню ``dup2``, тоді як останній "
"додатково встановлює прапор ``FD_CLOEXEC``."

msgid "Optimizations"
msgstr "Оптимізації"

msgid ""
"Compiler now optimizes simple C-style formatting with literal format "
"containing only format codes ``%s``, ``%r`` and ``%a`` and makes it as fast "
"as corresponding f-string expression. (Contributed by Serhiy Storchaka in :"
"issue:`28307`.)"
msgstr ""
"Тепер компілятор оптимізує просте форматування у стилі C за допомогою "
"літерального формату, що містить лише коди формату ``%s``, ``%r`` і ``%a``, "
"і робить його таким же швидким, як і відповідний вираз f-рядка. (Надав "
"Сергій Сторчака в :issue:`28307`.)"

msgid ""
"\"Zero-cost\" exceptions are implemented. The cost of ``try`` statements is "
"almost eliminated when no exception is raised. (Contributed by Mark Shannon "
"in :issue:`40222`.)"
msgstr ""
"Реалізовано винятки \"нульової вартості\". Вартість інструкцій ``try`` майже "
"зникає, якщо не виникає винятків. (Надав Марк Шеннон у :issue:`40222`.)"

msgid ""
"Pure ASCII strings are now normalized in constant time by :func:`unicodedata."
"normalize`. (Contributed by Dong-hee Na in :issue:`44987`.)"
msgstr ""
"Чисті рядки ASCII тепер нормалізуються в постійному часі за допомогою :func:"
"`unicodedata.normalize`. (Надав Dong-hee Na у :issue:`44987`.)"

msgid ""
":mod:`math` functions :func:`~math.comb` and :func:`~math.perm` are now up "
"to 10 times or more faster for large arguments (the speed up is larger for "
"larger *k*). (Contributed by Serhiy Storchaka in :issue:`37295`.)"
msgstr ""
":mod:`math` функції :func:`~math.comb` і :func:`~math.perm` тепер у 10 або "
"більше разів швидше для великих аргументів (швидкість більша для більших "
"*k*) . (Надав Сергій Сторчака в :issue:`37295`.)"

msgid ""
"Dict don't store hash value when all inserted keys are Unicode objects. This "
"reduces dict size. For example, ``sys.getsizeof(dict."
"fromkeys(\"abcdefg\"))`` becomes 272 bytes from 352 bytes on 64bit platform. "
"(Contributed by Inada Naoki in :issue:`46845`.)"
msgstr ""
"Dict не зберігає хеш-значення, якщо всі вставлені ключі є об’єктами Unicode. "
"Це зменшує розмір dict. Наприклад, ``sys.getsizeof(dict."
"fromkeys(\"abcdefg\"))`` стає 272 байтами з 352 байтів на 64-розрядній "
"платформі. (Надано Інадою Наокі в :issue:`46845`.)"

msgid ""
":mod:`re`'s regular expression matching engine has been partially "
"refactored, and now uses computed gotos (or \"threaded code\") on supported "
"platforms. As a result, Python 3.11 executes the `pyperformance regular "
"expression benchmarks <https://pyperformance.readthedocs.io/benchmarks."
"html#regex-dna>`_ up to 10% faster than Python 3.10."
msgstr ""
"Механізм зіставлення регулярних виразів :mod:`re` було частково перероблено, "
"і тепер він використовує обчислені gotos (або \"потоковий код\") на "
"підтримуваних платформах. Як наслідок, Python 3.11 виконує `тести регулярних "
"виразів pyperformance <https://pyperformance.readthedocs.io/benchmarks."
"html#regex-dna>`_ на 10% швидше, ніж Python 3.10."

msgid "Faster CPython"
msgstr "Швидший CPython"

msgid ""
"CPython 3.11 is on average `25% faster <https://github.com/faster-cpython/"
"ideas/blob/main/main-vs-310.rst>`_ than CPython 3.10 when measured with the "
"`pyperformance <https://github.com/python/pyperformance>`_ benchmark suite, "
"and compiled with GCC on Ubuntu Linux. Depending on your workload, the "
"speedup could be up to 10-60% faster."
msgstr ""
"CPython 3.11 у середньому на `25% швидший <https://github.com/faster-cpython/"
"ideas/blob/main/main-vs-310.rst>`_, ніж CPython 3.10, якщо вимірювати за "
"допомогою тестового набору `pyperformance <https://github.com/python/"
"pyperformance>`_ і скомпільовано за допомогою GCC на Ubuntu Linux. Залежно "
"від вашого робочого навантаження прискорення може бути на 10-60% швидшим."

msgid ""
"This project focuses on two major areas in Python: faster startup and faster "
"runtime. Other optimizations not under this project are listed in "
"`Optimizations`_."
msgstr ""
"Цей проект зосереджений на двох основних сферах Python: швидшому запуску та "
"швидшому виконанні. Інші оптимізації, які не входять до цього проекту, "
"перераховані в розділі `Optimizations`_."

msgid "Faster Startup"
msgstr "Швидший запуск"

msgid "Frozen imports / Static code objects"
msgstr "Заморожений імпорт / статичні об’єкти коду"

msgid ""
"Python caches bytecode in the :ref:`__pycache__<tut-pycache>` directory to "
"speed up module loading."
msgstr ""
"Python кешує байт-код у каталозі :ref:`__pycache__ <tut-pycache>`, щоб "
"пришвидшити завантаження модуля."

msgid "Previously in 3.10, Python module execution looked like this:"
msgstr "Раніше, у версії 3.10, виконання модуля Python виглядало так:"

msgid ""
"In Python 3.11, the core modules essential for Python startup are "
"\"frozen\". This means that their code objects (and bytecode) are statically "
"allocated by the interpreter. This reduces the steps in module execution "
"process to this:"
msgstr ""
"У Python 3.11 основні модулі, необхідні для запуску Python, \"заморожені\". "
"Це означає, що їхні кодові об’єкти (і байт-код) статично виділяються "
"інтерпретатором. Це скорочує кроки в процесі виконання модуля до наступного:"

msgid ""
"Interpreter startup is now 10-15% faster in Python 3.11. This has a big "
"impact for short-running programs using Python."
msgstr ""
"Запуск інтерпретатора тепер на 10-15% швидший у Python 3.11. Це має великий "
"вплив на короткострокові програми, які використовують Python."

msgid ""
"(Contributed by Eric Snow, Guido van Rossum and Kumar Aditya in numerous "
"issues.)"
msgstr ""
"(Надано Еріком Сноу, Гвідо ван Россумом і Кумаром Адітією в численних "
"випусках.)"

msgid "Faster Runtime"
msgstr "Швидше виконання"

msgid "Cheaper, lazy Python frames"
msgstr "Дешевші, ліниві фрейми Python"

msgid ""
"Python frames are created whenever Python calls a Python function. This "
"frame holds execution information. The following are new frame optimizations:"
msgstr ""
"Фрейми Python створюються кожного разу, коли Python викликає функцію Python. "
"Цей кадр містить інформацію про виконання. Нижче наведено нові оптимізації "
"кадрів:"

msgid "Streamlined the frame creation process."
msgstr "Спрощено процес створення кадру."

msgid ""
"Avoided memory allocation by generously re-using frame space on the C stack."
msgstr ""
"Уникнення виділення пам’яті шляхом щедрого повторного використання простору "
"кадру в стеку C."

msgid ""
"Streamlined the internal frame struct to contain only essential information. "
"Frames previously held extra debugging and memory management information."
msgstr ""
"Спрощена внутрішня структура фрейму, щоб містити лише важливу інформацію. "
"Кадри раніше містили додаткову інформацію для налагодження та керування "
"пам’яттю."

msgid ""
"Old-style frame objects are now created only when requested by debuggers or "
"by Python introspection functions such as ``sys._getframe`` or ``inspect."
"currentframe``. For most user code, no frame objects are created at all. As "
"a result, nearly all Python functions calls have sped up significantly. We "
"measured a 3-7% speedup in pyperformance."
msgstr ""
"Об’єкти рамки старого стилю тепер створюються лише за запитом налагоджувачів "
"або функцій інтроспекції Python, таких як ``sys._getframe`` або ``inspect."
"currentframe``. Для більшості користувацьких кодів фреймові об’єкти взагалі "
"не створюються. У результаті майже всі виклики функцій Python значно "
"прискорилися. Ми виміряли прискорення pyperformance на 3-7%."

msgid "(Contributed by Mark Shannon in :issue:`44590`.)"
msgstr "(Надав Марк Шеннон у :issue:`44590`.)"

msgid "Inlined Python function calls"
msgstr "Вбудовані виклики функцій Python"

msgid ""
"During a Python function call, Python will call an evaluating C function to "
"interpret that function's code. This effectively limits pure Python "
"recursion to what's safe for the C stack."
msgstr ""
"Під час виклику функції Python Python викличе оцінювальну функцію C для "
"інтерпретації коду цієї функції. Це фактично обмежує чисту рекурсію Python "
"тим, що безпечно для стека C."

msgid ""
"In 3.11, when CPython detects Python code calling another Python function, "
"it sets up a new frame, and \"jumps\" to the new code inside the new frame. "
"This avoids calling the C interpreting function altogether."
msgstr ""
"У версії 3.11, коли CPython виявляє код Python, який викликає іншу функцію "
"Python, він встановлює новий фрейм і \"переходить\" до нового коду в новому "
"фреймі. Це дозволяє повністю уникнути виклику функції інтерпретації C."

msgid ""
"Most Python function calls now consume no C stack space. This speeds up most "
"of such calls. In simple recursive functions like fibonacci or factorial, a "
"1.7x speedup was observed. This also means recursive functions can recurse "
"significantly deeper (if the user increases the recursion limit). We "
"measured a 1-3% improvement in pyperformance."
msgstr ""
"Більшість викликів функцій Python тепер не займають місця в стеку C. Це "
"прискорює більшість таких дзвінків. У простих рекурсивних функціях, таких як "
"фібоначчі або факториал, спостерігалося прискорення в 1,7 раза. Це також "
"означає, що рекурсивні функції можуть рекурсувати значно глибше (якщо "
"користувач збільшить обмеження рекурсії). Ми зафіксували покращення "
"pyperformance на 1-3%."

msgid "(Contributed by Pablo Galindo and Mark Shannon in :issue:`45256`.)"
msgstr "(Надано Пабло Галіндо та Марком Шенноном у :issue:`45256`.)"

msgid "PEP 659: Specializing Adaptive Interpreter"
msgstr "PEP 659: спеціалізований адаптивний інтерпретатор"

msgid ""
":pep:`659` is one of the key parts of the faster CPython project. The "
"general idea is that while Python is a dynamic language, most code has "
"regions where objects and types rarely change. This concept is known as "
"*type stability*."
msgstr ""
":pep:`659` є однією з ключових частин швидшого проекту CPython. Загальна "
"ідея полягає в тому, що хоча Python є динамічною мовою, більшість коду має "
"області, де об’єкти та типи рідко змінюються. Ця концепція відома як "
"*стабільність типу*."

msgid ""
"At runtime, Python will try to look for common patterns and type stability "
"in the executing code. Python will then replace the current operation with a "
"more specialized one. This specialized operation uses fast paths available "
"only to those use cases/types, which generally outperform their generic "
"counterparts. This also brings in another concept called *inline caching*, "
"where Python caches the results of expensive operations directly in the "
"bytecode."
msgstr ""
"Під час виконання Python намагатиметься шукати загальні шаблони та "
"стабільність типів у коді, що виконується. Потім Python замінить поточну "
"операцію на більш спеціалізовану. Ця спеціалізована операція використовує "
"швидкі шляхи, доступні лише для тих випадків/типів використання, які загалом "
"перевершують свої загальні аналоги. Це також привносить іншу концепцію під "
"назвою *вбудоване кешування*, де Python кешує результати дорогих операцій "
"безпосередньо в байт-коді."

msgid ""
"The specializer will also combine certain common instruction pairs into one "
"superinstruction. This reduces the overhead during execution."
msgstr ""
"Спеціаліст також поєднає певні загальні пари інструкцій в одну "
"суперінструкцію. Це зменшує накладні витрати під час виконання."

msgid ""
"Python will only specialize when it sees code that is \"hot\" (executed "
"multiple times). This prevents Python from wasting time for run-once code. "
"Python can also de-specialize when code is too dynamic or when the use "
"changes. Specialization is attempted periodically, and specialization "
"attempts are not too expensive. This allows specialization to adapt to new "
"circumstances."
msgstr ""
"Python спеціалізується лише тоді, коли бачить код, який є "
"\"гарячим\" (виконується кілька разів). Це не дозволяє Python витрачати час "
"на одноразовий код. Python також може деспеціалізуватися, коли код занадто "
"динамічний або коли використання змінюється. Періодично робляться спроби "
"спеціалізації, і спроби спеціалізації не надто дорогі. Це дозволяє "
"спеціалізації адаптуватися до нових обставин."

msgid ""
"(PEP written by Mark Shannon, with ideas inspired by Stefan Brunthaler. See :"
"pep:`659` for more information. Implementation by Mark Shannon and Brandt "
"Bucher, with additional help from Irit Katriel and Dennis Sweeney.)"
msgstr ""
"(PEP, написаний Марком Шенноном, з ідеями, натхненними Стефаном Брунталером. "
"Див. :pep:`659` для отримання додаткової інформації. Реалізація Марком "
"Шенноном і Брандтом Бухером за додаткової допомоги Іріт Катріель і Денніса "
"Суїні.)"

msgid "Operation"
msgstr "Операція"

msgid "Form"
msgstr "Форма"

msgid "Specialization"
msgstr "Спеціалізація"

msgid "Operation speedup (up to)"
msgstr "Прискорення роботи (до)"

msgid "Contributor(s)"
msgstr "Автор(и)"

msgid "Binary operations"
msgstr "Бінарні операції"

msgid "``x+x; x*x; x-x;``"
msgstr "``x+x; х*х; x-x;``"

msgid ""
"Binary add, multiply and subtract for common types such as ``int``, "
"``float``, and ``str`` take custom fast paths for their underlying types."
msgstr ""
"Двійкове додавання, множення та віднімання для поширених типів, таких як "
"``int``, ``float`` і ``str``, використовують власні швидкі шляхи для своїх "
"основних типів."

msgid "10%"
msgstr "10%"

msgid "Mark Shannon, Dong-hee Na, Brandt Bucher, Dennis Sweeney"
msgstr "Марк Шеннон, Дон Хі На, Брандт Бухер, Денніс Суїні"

msgid "Subscript"
msgstr "Підрядковий"

msgid "``a[i]``"
msgstr "``a[i]``"

msgid ""
"Subscripting container types such as ``list``, ``tuple`` and ``dict`` "
"directly index the underlying data structures."
msgstr ""
"Підрядкові типи контейнерів, такі як ``list``, ``tuple`` і ``dict``, "
"безпосередньо індексують базові структури даних."

msgid ""
"Subscripting custom ``__getitem__`` is also inlined similar to :ref:`inline-"
"calls`."
msgstr ""
"Підписка спеціального ``__getitem__`` також вбудована подібно до :ref:"
"`inline-calls`."

msgid "10-25%"
msgstr "10-25%"

msgid "Irit Katriel, Mark Shannon"
msgstr "Ірит Катріель, Марк Шеннон"

msgid "Store subscript"
msgstr "Підрядковий магазин"

msgid "``a[i] = z``"
msgstr "``a[i] = z``"

msgid "Similar to subscripting specialization above."
msgstr "Подібно до спеціалізації підписки вище."

msgid "Dennis Sweeney"
msgstr "Денніс Суїні"

msgid "Calls"
msgstr "Дзвінки"

msgid "``f(arg)`` ``C(arg)``"
msgstr "``f(arg)`` ``C(arg)``"

msgid ""
"Calls to common builtin (C) functions and types such as ``len`` and ``str`` "
"directly call their underlying C version. This avoids going through the "
"internal calling convention."
msgstr ""
"Виклики загальних вбудованих (C) функцій і типів, таких як ``len`` і "
"``str``, безпосередньо викликають їх базову версію C. Це дозволяє уникнути "
"використання внутрішньої угоди про виклики."

msgid "20%"
msgstr "20%"

msgid "Mark Shannon, Ken Jin"
msgstr "Марк Шеннон, Кен Джин"

msgid "Load global variable"
msgstr "Завантажити глобальну змінну"

msgid "``print`` ``len``"
msgstr "``print`` ``len``"

msgid ""
"The object's index in the globals/builtins namespace is cached. Loading "
"globals and builtins require zero namespace lookups."
msgstr ""
"Індекс об’єкта в просторі імен globals/builtins кешується. Завантаження "
"глобальних і вбудованих елементів не вимагає пошуку простору імен."

msgid "[1]_"
msgstr "[1]_"

msgid "Mark Shannon"
msgstr "Марк Шеннон"

msgid "Load attribute"
msgstr "Завантажити атрибут"

msgid "``o.attr``"
msgstr "``o.attr``"

msgid ""
"Similar to loading global variables. The attribute's index inside the class/"
"object's namespace is cached. In most cases, attribute loading will require "
"zero namespace lookups."
msgstr ""
"Подібно до завантаження глобальних змінних. Індекс атрибута в просторі імен "
"класу/об’єкта кешується. У більшості випадків завантаження атрибутів не "
"потребуватиме пошуку простору імен."

msgid "[2]_"
msgstr "[2]_"

msgid "Load methods for call"
msgstr "Завантажити методи для виклику"

msgid "``o.meth()``"
msgstr "``o.meth()``"

msgid ""
"The actual address of the method is cached. Method loading now has no "
"namespace lookups -- even for classes with long inheritance chains."
msgstr ""
"Справжня адреса методу кешується. Завантаження методів тепер не має пошуку "
"простору імен — навіть для класів із довгими ланцюжками успадкування."

msgid "10-20%"
msgstr "10-20%"

msgid "Ken Jin, Mark Shannon"
msgstr "Кен Джин, Марк Шеннон"

msgid "Store attribute"
msgstr "Атрибут магазину"

msgid "``o.attr = z``"
msgstr "``o.attr = z``"

msgid "Similar to load attribute optimization."
msgstr "Подібно до оптимізації атрибутів завантаження."

msgid "2% in pyperformance"
msgstr "2% у pyperformance"

msgid "Unpack Sequence"
msgstr "Розпакуйте послідовність"

msgid "``*seq``"
msgstr "``*seq``"

msgid ""
"Specialized for common containers such as ``list`` and ``tuple``. Avoids "
"internal calling convention."
msgstr ""
"Спеціалізується на звичайних контейнерах, таких як ``список`` і ``кортеж``. "
"Уникає внутрішньої угоди про виклики."

msgid "8%"
msgstr "8%"

msgid "Brandt Bucher"
msgstr "Брандт Бухер"

msgid ""
"A similar optimization already existed since Python 3.8.  3.11 specializes "
"for more forms and reduces some overhead."
msgstr ""
"Подібна оптимізація вже існувала з Python 3.8. 3.11 спеціалізується на "
"більшій кількості форм і зменшує деякі накладні витрати."

msgid ""
"A similar optimization already existed since Python 3.10. 3.11 specializes "
"for more forms. Furthermore, all attribute loads should be sped up by :issue:"
"`45947`."
msgstr ""
"Подібна оптимізація вже існувала з Python 3.10. 3.11 спеціалізується на "
"більшій кількості форм. Крім того, усі завантаження атрибутів мають бути "
"прискорені на :issue:`45947`."

msgid "Misc"
msgstr "Різне"

msgid ""
"Objects now require less memory due to lazily created object namespaces. "
"Their namespace dictionaries now also share keys more freely. (Contributed "
"Mark Shannon in :issue:`45340` and :issue:`40116`.)"
msgstr ""
"Тепер об’єкти вимагають менше пам’яті через ліниво створювані простори імен "
"об’єктів. Їхні словники простору імен тепер також вільніше обмінюються "
"ключами. (Надав Марк Шеннон у :issue:`45340` і :issue:`40116`.)"

msgid ""
"A more concise representation of exceptions in the interpreter reduced the "
"time required for catching an exception by about 10%. (Contributed by Irit "
"Katriel in :issue:`45711`.)"
msgstr ""
"Більш стисле представлення винятків в інтерпретаторі скоротило час, "
"необхідний для перехоплення винятку, приблизно на 10%. (Надано Іріт Катріель "
"у :issue:`45711`.)"

msgid "FAQ"
msgstr "FAQ"

msgid "Q: How should I write my code to utilize these speedups?"
msgstr "З: Як мені написати свій код, щоб використовувати ці прискорення?"

msgid ""
"A: You don't have to change your code. Write Pythonic code that follows "
"common best practices. The Faster CPython project optimizes for common code "
"patterns we observe."
msgstr ""
"A: Вам не потрібно змінювати свій код. Напишіть код Pythonic, який "
"дотримується загальних найкращих практик. Проект Faster CPython оптимізує "
"загальні шаблони коду, які ми спостерігаємо."

msgid "Q: Will CPython 3.11 use more memory?"
msgstr "З: Чи використовуватиме CPython 3.11 більше пам’яті?"

msgid ""
"A: Maybe not. We don't expect memory use to exceed 20% more than 3.10. This "
"is offset by memory optimizations for frame objects and object dictionaries "
"as mentioned above."
msgstr ""
"A: Можливо, ні. Ми не очікуємо, що використання пам’яті перевищить 20% "
"більше, ніж 3.10. Це компенсується оптимізацією пам’яті для об’єктів фрейму "
"та словників об’єктів, як зазначено вище."

msgid "Q: I don't see any speedups in my workload. Why?"
msgstr "З: Я не бачу прискорення свого робочого навантаження. чому"

msgid ""
"A: Certain code won't have noticeable benefits. If your code spends most of "
"its time on I/O operations, or already does most of its computation in a C "
"extension library like numpy, there won't be significant speedup. This "
"project currently benefits pure-Python workloads the most."
msgstr ""
"A: Певний код не матиме помітних переваг. Якщо ваш код витрачає більшу "
"частину свого часу на операції введення-виведення або вже виконує більшу "
"частину своїх обчислень у бібліотеці розширення C, як-от numpy, значного "
"прискорення не буде. Зараз цей проект найбільше приносить користь робочим "
"навантаженням на чистому Python."

msgid ""
"Furthermore, the pyperformance figures are a geometric mean. Even within the "
"pyperformance benchmarks, certain benchmarks have slowed down slightly, "
"while others have sped up by nearly 2x!"
msgstr ""
"Крім того, показники pyperformance є середнім геометричним. Навіть у тестах "
"pyperformance деякі тести трохи сповільнилися, тоді як інші прискорилися "
"майже вдвічі!"

msgid "Q: Is there a JIT compiler?"
msgstr "Q: Чи існує JIT-компілятор?"

msgid "A: No. We're still exploring other optimizations."
msgstr "A: Ні. Ми все ще вивчаємо інші оптимізації."

msgid "About"
msgstr "про"

msgid ""
"Faster CPython explores optimizations for :term:`CPython`. The main team is "
"funded by Microsoft to work on this full-time. Pablo Galindo Salgado is also "
"funded by Bloomberg LP to work on the project part-time. Finally, many "
"contributors are volunteers from the community."
msgstr ""
"Швидший CPython досліджує оптимізацію для :term:`CPython`. Основна команда "
"фінансується корпорацією Майкрософт для роботи над цим повний робочий день. "
"Пабло Галіндо Сальгадо також фінансується Bloomberg LP, щоб працювати над "
"проектом неповний робочий день. Нарешті, багато учасників є волонтерами "
"спільноти."

msgid "CPython bytecode changes"
msgstr "Зміни байт-коду CPython"

msgid ""
"Replaced all numeric ``BINARY_*`` and ``INPLACE_*`` instructions with a "
"single :opcode:`BINARY_OP` implementation."
msgstr ""
"Замінено всі числові інструкції ``BINARY_*`` і ``INPLACE_*`` єдиною "
"реалізацією :opcode:`BINARY_OP`."

msgid ""
"Replaced the three call instructions: :opcode:`CALL_FUNCTION`, :opcode:"
"`CALL_FUNCTION_KW` and :opcode:`CALL_METHOD` with :opcode:`PUSH_NULL`, :"
"opcode:`PRECALL`, :opcode:`CALL`, and :opcode:`KW_NAMES`. This decouples the "
"argument shifting for methods from the handling of keyword arguments and "
"allows better specialization of calls."
msgstr ""
"Замінено три інструкції виклику: :opcode:`CALL_FUNCTION`, :opcode:"
"`CALL_FUNCTION_KW` і :opcode:`CALL_METHOD` на :opcode:`PUSH_NULL`, :opcode:"
"`PRECALL`, :opcode:`CALL` і: код операції: `KW_NAMES`. Це відокремлює "
"зміщення аргументів для методів від обробки ключових аргументів і дозволяє "
"краще спеціалізувати виклики."

msgid "Removed ``COPY_DICT_WITHOUT_KEYS`` and ``GEN_START``."
msgstr "Видалено ``COPY_DICT_WITHOUT_KEYS`` і ``GEN_START``."

msgid ""
":opcode:`MATCH_CLASS` and :opcode:`MATCH_KEYS` no longer push an additional "
"boolean value indicating whether the match succeeded or failed. Instead, "
"they indicate failure with :const:`None` (where a tuple of extracted values "
"would otherwise be)."
msgstr ""
":opcode:`MATCH_CLASS` і :opcode:`MATCH_KEYS` більше не надсилають додаткове "
"логічне значення, яке вказує на те, успішно чи невдало збіг. Натомість вони "
"вказують на помилку за допомогою :const:`None` (там, де інакше був би кортеж "
"витягнутих значень)."

msgid ""
"Replace several stack manipulation instructions (``DUP_TOP``, "
"``DUP_TOP_TWO``, ``ROT_TWO``, ``ROT_THREE``, ``ROT_FOUR``, and ``ROT_N``) "
"with new :opcode:`COPY` and :opcode:`SWAP` instructions."
msgstr ""
"Замініть кілька інструкцій маніпулювання стеком (``DUP_TOP``, "
"``DUP_TOP_TWO``, ``ROT_TWO``, ``ROT_THREE``, ``ROT_FOUR`` і ``ROT_N``) на "
"новий :opcode:`COPY` і :opcode:`Інструкції SWAP`."

msgid ""
"Replaced :opcode:`JUMP_IF_NOT_EXC_MATCH` by :opcode:`CHECK_EXC_MATCH` which "
"performs the check but does not jump."
msgstr ""
"Замінено :opcode:`JUMP_IF_NOT_EXC_MATCH` на :opcode:`CHECK_EXC_MATCH`, який "
"виконує перевірку, але не стрибає."

msgid ""
"Replaced :opcode:`JUMP_IF_NOT_EG_MATCH` by :opcode:`CHECK_EG_MATCH` which "
"performs the check but does not jump."
msgstr ""
"Замінено :opcode:`JUMP_IF_NOT_EG_MATCH` на :opcode:`CHECK_EG_MATCH`, який "
"виконує перевірку, але не стрибає."

msgid ""
"Replaced :opcode:`JUMP_ABSOLUTE` by the relative :opcode:`JUMP_BACKWARD`."
msgstr "Замінено :opcode:`JUMP_ABSOLUTE` на відносний :opcode:`JUMP_BACKWARD`."

msgid ""
"Added :opcode:`JUMP_BACKWARD_NO_INTERRUPT`, which is used in certain loops "
"where it is undesirable to handle interrupts."
msgstr ""
"Додано :opcode:`JUMP_BACKWARD_NO_INTERRUPT`, який використовується в певних "
"циклах, де небажано обробляти переривання."

msgid ""
"Replaced :opcode:`POP_JUMP_IF_TRUE` and :opcode:`POP_JUMP_IF_FALSE` by the "
"relative :opcode:`POP_JUMP_FORWARD_IF_TRUE`, :opcode:"
"`POP_JUMP_BACKWARD_IF_TRUE`, :opcode:`POP_JUMP_FORWARD_IF_FALSE` and :opcode:"
"`POP_JUMP_BACKWARD_IF_FALSE`."
msgstr ""
"Замінено :opcode:`POP_JUMP_IF_TRUE` і :opcode:`POP_JUMP_IF_FALSE` на "
"відносні :opcode:`POP_JUMP_FORWARD_IF_TRUE`, :opcode:"
"`POP_JUMP_BACKWARD_IF_TRUE`, :opcode:`POP_JUMP_FORWARD_IF_FALSE` і :opcode:"
"`POP_JUMP_IF_BACKWARD`."

msgid ""
"Added :opcode:`POP_JUMP_FORWARD_IF_NOT_NONE`, :opcode:"
"`POP_JUMP_BACKWARD_IF_NOT_NONE`, :opcode:`POP_JUMP_FORWARD_IF_NONE` and :"
"opcode:`POP_JUMP_BACKWARD_IF_NONE` opcodes to speed up conditional jumps."
msgstr ""
"Додано коди операцій :opcode:`POP_JUMP_FORWARD_IF_NOT_NONE`, :opcode:"
"`POP_JUMP_BACKWARD_IF_NOT_NONE`, :opcode:`POP_JUMP_FORWARD_IF_NONE` і :"
"opcode:`POP_JUMP_BACKWARD_IF_NONE` для прискорення умовних переходів."

msgid ""
":opcode:`JUMP_IF_TRUE_OR_POP` and :opcode:`JUMP_IF_FALSE_OR_POP` are now "
"relative rather than absolute."
msgstr ""
":opcode:`JUMP_IF_TRUE_OR_POP` і :opcode:`JUMP_IF_FALSE_OR_POP` тепер "
"відносні, а не абсолютні."

msgid "Deprecated"
msgstr "Застаріле"

msgid ""
"Chaining :class:`classmethod` descriptors (introduced in :issue:`19072`) is "
"now deprecated.  It can no longer be used to wrap other descriptors such as :"
"class:`property`.  The core design of this feature was flawed and caused a "
"number of downstream problems.  To \"pass-through\" a :class:`classmethod`, "
"consider using the ``__wrapped__`` attribute that was added in Python 3.10. "
"(Contributed by Raymond Hettinger in :gh:`89519`.)"
msgstr ""
"З’єднання дескрипторів :class:`classmethod` (введене в :issue:`19072`) тепер "
"застаріло. Його більше не можна використовувати для обгортання інших "
"дескрипторів, таких як :class:`property`. Основна конструкція цієї функції "
"мала недоліки, що спричинило низку проблем у нижній частині. Щоб "
"\"пропустити\" :class:`classmethod`, розгляньте можливість використання "
"атрибута ``__wrapped__``, який було додано в Python 3.10. (Надав Реймонд "
"Геттінгер у :gh:`89519`.)"

msgid ""
"Octal escapes in string and bytes literals with value larger than ``0o377`` "
"now produce :exc:`DeprecationWarning`. In a future Python version they will "
"be a :exc:`SyntaxWarning` and eventually a :exc:`SyntaxError`. (Contributed "
"by Serhiy Storchaka in :gh:`81548`.)"
msgstr ""
"Вісімкове екранування в рядкових і байтових літералах зі значенням, більшим "
"за ``0o377``, тепер створює :exc:`DeprecationWarning`. У майбутній версії "
"Python вони будуть :exc:`SyntaxWarning` і, зрештою, :exc:`SyntaxError`. "
"(Надав Сергій Сторчака в :gh:`81548`.)"

msgid ""
"The :mod:`lib2to3` package and ``2to3`` tool are now deprecated and may not "
"be able to parse Python 3.10 or newer. See the :pep:`617` (New PEG parser "
"for CPython).  (Contributed by Victor Stinner in :issue:`40360`.)"
msgstr ""
"Пакунок :mod:`lib2to3` і інструмент ``2to3`` тепер не підтримуються, і вони "
"можуть не розбирати Python 3.10 або новішої версії. Перегляньте :pep:`617` "
"(новий парсер PEG для CPython). (Надав Віктор Стіннер у :issue:`40360`.)"

msgid ""
"Undocumented modules ``sre_compile``, ``sre_constants`` and ``sre_parse`` "
"are now deprecated. (Contributed by Serhiy Storchaka in :issue:`47152`.)"
msgstr ""
"Недокументовані модулі ``sre_compile``, ``sre_constants`` і ``sre_parse`` "
"тепер застаріли. (Надав Сергій Сторчака в :issue:`47152`.)"

msgid ""
":class:`webbrowser.MacOSX` is deprecated and will be removed in Python 3.13. "
"It is untested and undocumented and also not used by webbrowser itself. "
"(Contributed by Dong-hee Na in :issue:`42255`.)"
msgstr ""
":class:`webbrowser.MacOSX` застарів і буде видалено в Python 3.13. Він не "
"перевірений і не задокументований, а також не використовується самим веб-"
"браузером. (Надав Dong-hee Na у :issue:`42255`.)"

msgid ""
"The behavior of returning a value from a :class:`~unittest.TestCase` and :"
"class:`~unittest.IsolatedAsyncioTestCase` test methods (other than the "
"default ``None`` value), is now deprecated."
msgstr ""
"Поведінка повернення значення з тестових методів :class:`~unittest.TestCase` "
"і :class:`~unittest.IsolatedAsyncioTestCase` (окрім значення за умовчанням "
"``None``) тепер застаріла."

msgid ""
"Deprecated the following :mod:`unittest` functions, scheduled for removal in "
"Python 3.13:"
msgstr ""
"Застаріли такі функції :mod:`unittest`, заплановані для видалення в Python "
"3.13:"

msgid ":func:`unittest.findTestCases`"
msgstr ":func:`unittest.findTestCases`"

msgid ":func:`unittest.makeSuite`"
msgstr ":func:`unittest.makeSuite`"

msgid ":func:`unittest.getTestCaseNames`"
msgstr ":func:`unittest.getTestCaseNames`"

msgid "Use :class:`~unittest.TestLoader` method instead:"
msgstr "Замість цього використовуйте метод :class:`~unittest.TestLoader`:"

msgid ":meth:`unittest.TestLoader.loadTestsFromModule`"
msgstr ":meth:`unittest.TestLoader.loadTestsFromModule`"

msgid ":meth:`unittest.TestLoader.loadTestsFromTestCase`"
msgstr ":meth:`unittest.TestLoader.loadTestsFromTestCase`"

msgid ":meth:`unittest.TestLoader.getTestCaseNames`"
msgstr ":meth:`unittest.TestLoader.getTestCaseNames`"

msgid "(Contributed by Erlend E. Aasland in :issue:`5846`.)"
msgstr "(Надав Erlend E. Aasland у :issue:`5846`.)"

msgid ""
"The :meth:`turtle.RawTurtle.settiltangle` is deprecated since Python 3.1, it "
"now emits a deprecation warning and will be removed in Python 3.13. Use :"
"meth:`turtle.RawTurtle.tiltangle` instead (it was earlier incorrectly marked "
"as deprecated, its docstring is now corrected). (Contributed by Hugo van "
"Kemenade in :issue:`45837`.)"
msgstr ""
":meth:`turtle.RawTurtle.settiltangle` не підтримується з Python 3.1, тепер "
"він видає попередження про застаріння та буде видалено в Python 3.13. "
"Натомість використовуйте :meth:`turtle.RawTurtle.tiltangle` (раніше він був "
"неправильно позначений як застарілий, тепер його документацію виправлено). "
"(Надав Хуго ван Кеменаде в :issue:`45837`.)"

msgid ""
"The delegation of :func:`int` to :meth:`__trunc__` is now deprecated. "
"Calling ``int(a)`` when ``type(a)`` implements :meth:`__trunc__` but not :"
"meth:`__int__` or :meth:`__index__` now raises a :exc:`DeprecationWarning`. "
"(Contributed by Zackery Spytz in :issue:`44977`.)"
msgstr ""
"Делегування :func:`int` :meth:`__trunc__` тепер застаріло. Виклик "
"``int(a)``, коли ``type(a)`` реалізує :meth:`__trunc__`, але не :meth:"
"`__int__` або :meth:`__index__`, тепер викликає :exc:`DeprecationWarning`. "
"(Надав Закері Шпітц у :issue:`44977`.)"

msgid ""
"The following have been deprecated in :mod:`configparser` since Python 3.2. "
"Their deprecation warnings have now been updated to note they will removed "
"in Python 3.12:"
msgstr ""
"У :mod:`configparser` з Python 3.2 застаріли наступні. Їхні попередження про "
"припинення підтримки тепер оновлено, щоб зазначити, що вони будуть видалені "
"в Python 3.12:"

msgid "the :class:`configparser.SafeConfigParser` class"
msgstr "клас :class:`configparser.SafeConfigParser`"

msgid "the :attr:`configparser.ParsingError.filename` property"
msgstr "властивість :attr:`configparser.ParsingError.filename`"

msgid "the :meth:`configparser.RawConfigParser.readfp` method"
msgstr "метод :meth:`configparser.RawConfigParser.readfp`"

msgid "(Contributed by Hugo van Kemenade in :issue:`45173`.)"
msgstr "(Надав Хуго ван Кеменаде в :issue:`45173`.)"

msgid ""
":class:`configparser.LegacyInterpolation` has been deprecated in the "
"docstring since Python 3.2. It now emits a :exc:`DeprecationWarning` and "
"will be removed in Python 3.13. Use :class:`configparser.BasicInterpolation` "
"or :class:`configparser.ExtendedInterpolation` instead. (Contributed by Hugo "
"van Kemenade in :issue:`46607`.)"
msgstr ""
":class:`configparser.LegacyInterpolation` не підтримується в рядку "
"документації з Python 3.2. Тепер він видає :exc:`DeprecationWarning` і буде "
"видалено в Python 3.13. Замість цього використовуйте :class:`configparser."
"BasicInterpolation` або :class:`configparser.ExtendedInterpolation`. (Надав "
"Хуго ван Кеменаде в :issue:`46607`.)"

msgid ""
"The :func:`locale.getdefaultlocale` function is deprecated and will be "
"removed in Python 3.13. Use :func:`locale.setlocale`, :func:`locale."
"getpreferredencoding(False) <locale.getpreferredencoding>` and :func:`locale."
"getlocale` functions instead. (Contributed by Victor Stinner in :gh:`90817`.)"
msgstr ""
"Функція :func:`locale.getdefaultlocale` є застарілою та буде видалена в "
"Python 3.13. Замість цього використовуйте функції :func:`locale.setlocale`, :"
"func:`locale.getpreferredencoding(False) <locale.getpreferredencoding>` і :"
"func:`locale.getlocale`. (Надав Віктор Стіннер у :gh:`90817`.)"

msgid ""
"The :func:`locale.resetlocale` function is deprecated and will be removed in "
"Python 3.13. Use ``locale.setlocale(locale.LC_ALL, \"\")`` instead. "
"(Contributed by Victor Stinner in :gh:`90817`.)"
msgstr ""
"Функція :func:`locale.resetlocale` є застарілою та буде видалена в Python "
"3.13. Замість цього використовуйте ``locale.setlocale(locale.LC_ALL, "
"\"\")``. (Надав Віктор Стіннер у :gh:`90817`.)"

msgid ""
"The :mod:`asynchat`, :mod:`asyncore` and  :mod:`smtpd` modules have been "
"deprecated since at least Python 3.6. Their documentation and deprecation "
"warnings have now been updated to note they will removed in Python 3.12 (:"
"pep:`594`). (Contributed by Hugo van Kemenade in :issue:`47022`.)"
msgstr ""
"Модулі :mod:`asynchat`, :mod:`asyncore` і :mod:`smtpd` є застарілими "
"принаймні з Python 3.6. Їхню документацію та застереження щодо застарілості "
"тепер оновлено, щоб зазначити, що вони будуть видалені в Python 3.12 (:pep:"
"`594`). (Надав Хуго ван Кеменаде в :issue:`47022`.)"

msgid ""
":pep:`594` led to the deprecations of the following modules which are slated "
"for removal in Python 3.13:"
msgstr ""
":pep:`594` призвело до припинення підтримки таких модулів, які планується "
"видалити в Python 3.13:"

msgid ":mod:`aifc`"
msgstr ":mod:`aifc`"

msgid ":mod:`audioop`"
msgstr ":mod:`audioop`"

msgid ":mod:`cgi`"
msgstr ":mod:`cgi`"

msgid ":mod:`cgitb`"
msgstr ":mod:`cgitb`"

msgid ":mod:`chunk`"
msgstr ":mod:`chunk`"

msgid ":mod:`crypt`"
msgstr ":mod:`crypt`"

msgid ":mod:`imghdr`"
msgstr ":mod:`imghdr`"

msgid ":mod:`mailcap`"
msgstr ":mod:`mailcap`"

msgid ":mod:`msilib`"
msgstr ":mod:`msilib`"

msgid ":mod:`nis`"
msgstr ":mod:`nis`"

msgid ":mod:`nntplib`"
msgstr ":mod:`nntplib`"

msgid ":mod:`ossaudiodev`"
msgstr ":mod:`ossaudiodev`"

msgid ":mod:`pipes`"
msgstr ":mod:`pipes`"

msgid ":mod:`sndhdr`"
msgstr ":mod:`sndhdr`"

msgid ":mod:`spwd`"
msgstr ":mod:`spwd`"

msgid ":mod:`sunau`"
msgstr ":mod:`sunau`"

msgid ":mod:`telnetlib`"
msgstr ":mod:`telnetlib`"

msgid ":mod:`uu`"
msgstr ":mod:`uu`"

msgid ":mod:`xdrlib`"
msgstr ":mod:`xdrlib`"

msgid ""
"(Contributed by Brett Cannon in :issue:`47061` and Victor Stinner in :gh:"
"`68966`.)"
msgstr ""
"(Надано Бреттом Кенноном у :issue:`47061` та Віктором Стіннером у :gh:"
"`68966`.)"

msgid ""
"More strict rules will be applied now applied for numerical group references "
"and group names in regular expressions in future Python versions. Only "
"sequence of ASCII digits will be now accepted as a numerical reference. The "
"group name in bytes patterns and replacement strings could only contain "
"ASCII letters and digits and underscore. For now, a deprecation warning is "
"raised for such syntax. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
"Тепер для посилань на числові групи та імен груп у регулярних виразах у "
"майбутніх версіях Python застосовуватимуться більш суворі правила. Лише "
"послідовність цифр ASCII тепер прийматиметься як числове посилання. Назва "
"групи в шаблонах байтів і рядках заміни може містити лише літери та цифри "
"ASCII і підкреслення. Наразі для такого синтаксису надсилається попередження "
"про застаріле. (Надав Сергій Сторчака в :gh:`91760`.)"

msgid ""
":class:`typing.Text`, which exists solely to provide compatibility support "
"between Python 2 and Python 3 code, is now deprecated. Its removal is "
"currently unplanned, but users are encouraged to use :class:`str` instead "
"wherever possible. (Contributed by Alex Waygood in :gh:`92332`.)"
msgstr ""
":class:`typing.Text`, який існує виключно для підтримки сумісності між "
"кодами Python 2 і Python 3, тепер не підтримується. Його видалення наразі не "
"планується, але користувачам рекомендується використовувати :class:`str` "
"натомість, де це можливо. (Надав Алекс Вейгуд у :gh:`92332`.)"

msgid ""
"The keyword argument syntax for constructing :data:`~typing.TypedDict` types "
"is now deprecated. Support will be removed in Python 3.13. (Contributed by "
"Jingchen Ye in :gh:`90224`.)"
msgstr ""
"Синтаксис ключового аргументу для побудови типів :data:`~typing.TypedDict` "
"тепер застарів. У Python 3.13 підтримку буде припинено. (Надав Jingchen Ye "
"у :gh:`90224`.)"

msgid ""
"The :func:`re.template` function and the corresponding :const:`re.TEMPLATE` "
"and :const:`re.T` flags are deprecated, as they were undocumented and lacked "
"an obvious purpose. They will be removed in Python 3.13. (Contributed by "
"Serhiy Storchaka and Miro Hrončok in :gh:`92728`.)"
msgstr ""
"Функція :func:`re.template` і відповідні прапорці :const:`re.TEMPLATE` і :"
"const:`re.T` застаріли, оскільки вони були незадокументовані та не мали "
"очевидної мети. Їх буде видалено в Python 3.13. (Надано Сергієм Сторчакою та "
"Міро Хрончок у :gh:`92728`.)"

msgid "Pending Removal in Python 3.12"
msgstr "Очікує на видалення в Python 3.12"

msgid ""
"The following APIs have been deprecated in earlier Python releases, and will "
"be removed in Python 3.12."
msgstr ""
"У попередніх версіях Python наведені нижче API-інтерфейси застаріли та "
"будуть видалені в Python 3.12."

msgid "Python API:"
msgstr "API Python:"

msgid ":class:`pkgutil.ImpImporter`"
msgstr ":class:`pkgutil.ImpImporter`"

msgid ":class:`pkgutil.ImpLoader`"
msgstr ":class:`pkgutil.ImpLoader`"

msgid ":envvar:`PYTHONTHREADDEBUG`"
msgstr ":envvar:`PYTHONTHREADDEBUG`"

msgid ":func:`importlib.find_loader`"
msgstr ":func:`importlib.find_loader`"

msgid ":func:`importlib.util.module_for_loader`"
msgstr ":func:`importlib.util.module_for_loader`"

msgid ":func:`importlib.util.set_loader_wrapper`"
msgstr ":func:`importlib.util.set_loader_wrapper`"

msgid ":func:`importlib.util.set_package_wrapper`"
msgstr ":func:`importlib.util.set_package_wrapper`"

msgid ":meth:`importlib.abc.Loader.module_repr`"
msgstr ":meth:`importlib.abc.Loader.module_repr`"

msgid ":meth:`importlib.abc.Loadermodule_repr`"
msgstr ":meth:`importlib.abc.Loadermodule_repr`"

msgid ":meth:`importlib.abc.MetaPathFinder.find_module`"
msgstr ":meth:`importlib.abc.MetaPathFinder.find_module`"

msgid ":meth:`importlib.abc.PathEntryFinder.find_loader`"
msgstr ":meth:`importlib.abc.PathEntryFinder.find_loader`"

msgid ":meth:`importlib.abc.PathEntryFinder.find_module`"
msgstr ":meth:`importlib.abc.PathEntryFinder.find_module`"

msgid ":meth:`importlib.machinery.BuiltinImporter.find_module`"
msgstr ":meth:`importlib.machinery.BuiltinImporter.find_module`"

msgid ":meth:`importlib.machinery.BuiltinLoader.module_repr`"
msgstr ":meth:`importlib.machinery.BuiltinLoader.module_repr`"

msgid ":meth:`importlib.machinery.FileFinder.find_loader`"
msgstr ":meth:`importlib.machinery.FileFinder.find_loader`"

msgid ":meth:`importlib.machinery.FileFinder.find_module`"
msgstr ":meth:`importlib.machinery.FileFinder.find_module`"

msgid ":meth:`importlib.machinery.FrozenImporter.find_module`"
msgstr ":meth:`importlib.machinery.FrozenImporter.find_module`"

msgid ":meth:`importlib.machinery.FrozenLoader.module_repr`"
msgstr ":meth:`importlib.machinery.FrozenLoader.module_repr`"

msgid ":meth:`importlib.machinery.PathFinder.find_module`"
msgstr ":meth:`importlib.machinery.PathFinder.find_module`"

msgid ":meth:`importlib.machinery.WindowsRegistryFinder.find_module`"
msgstr ":meth:`importlib.machinery.WindowsRegistryFinder.find_module`"

msgid ":meth:`pathlib.Path.link_to`"
msgstr ":meth:`pathlib.Path.link_to`"

msgid "The entire :ref:`distutils namespace <distutils-deprecated>`"
msgstr "Весь :ref:`простір імен distutils <distutils-deprecated>`"

msgid ":func:`cgi.log`"
msgstr ":func:`cgi.log`"

msgid ":func:`sqlite3.OptimizedUnicode`"
msgstr ":func:`sqlite3.OptimizedUnicode`"

msgid ":func:`sqlite3.enable_shared_cache`"
msgstr ":func:`sqlite3.enable_shared_cache`"

msgid "C API:"
msgstr "C API:"

msgid ":c:func:`PyUnicode_AS_DATA`"
msgstr ":c:func:`PyUnicode_AS_DATA`"

msgid ":c:func:`PyUnicode_AS_UNICODE`"
msgstr ":c:func:`PyUnicode_AS_UNICODE`"

msgid ":c:func:`PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`PyUnicode_AsUnicodeAndSize`"

msgid ":c:func:`PyUnicode_AsUnicode`"
msgstr ":c:func:`PyUnicode_AsUnicode`"

msgid ":c:func:`PyUnicode_FromUnicode`"
msgstr ":c:func:`PyUnicode_FromUnicode`"

msgid ":c:func:`PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`PyUnicode_GET_DATA_SIZE`"

msgid ":c:func:`PyUnicode_GET_SIZE`"
msgstr ":c:func:`PyUnicode_GET_SIZE`"

msgid ":c:func:`PyUnicode_GetSize`"
msgstr ":c:func:`PyUnicode_GetSize`"

msgid ":c:func:`PyUnicode_IS_COMPACT`"
msgstr ":c:func:`PyUnicode_IS_COMPACT`"

msgid ":c:func:`PyUnicode_IS_READY`"
msgstr ":c:func:`PyUnicode_IS_READY`"

msgid ":c:func:`PyUnicode_READY`"
msgstr ":c:func:`PyUnicode_READY`"

msgid ":c:func:`Py_UNICODE_WSTR_LENGTH`"
msgstr ":c:func:`Py_UNICODE_WSTR_LENGTH`"

msgid ":c:func:`_PyUnicode_AsUnicode`"
msgstr ":c:func:`_PyUnicode_AsUnicode`"

msgid ":c:macro:`PyUnicode_WCHAR_KIND`"
msgstr ":c:macro:`PyUnicode_WCHAR_KIND`"

msgid ":c:type:`PyUnicodeObject`"
msgstr ":c:type:`PyUnicodeObject`"

msgid ":c:func:`PyUnicode_InternImmortal()`"
msgstr ":c:func:`PyUnicode_InternImmortal()`"

msgid "Removed"
msgstr "Видалено"

msgid ""
":class:`smtpd.MailmanProxy` is now removed as it is unusable without an "
"external module, ``mailman``. (Contributed by Dong-hee Na in :issue:`35800`.)"
msgstr ""
":class:`smtpd.MailmanProxy` тепер видалено, оскільки його не можна "
"використовувати без зовнішнього модуля, ``mailman``. (Надав Dong-hee Na у :"
"issue:`35800`.)"

msgid ""
"The ``binhex`` module, deprecated in Python 3.9, is now removed. The "
"following :mod:`binascii` functions, deprecated in Python 3.9, are now also "
"removed:"
msgstr ""
"Модуль ``binhex``, застарілий у Python 3.9, тепер видалено. Наступні "
"функції :mod:`binascii`, застарілі в Python 3.9, тепер також видалено:"

msgid "``a2b_hqx()``, ``b2a_hqx()``;"
msgstr "``a2b_hqx()``, ``b2a_hqx()``;"

msgid "``rlecode_hqx()``, ``rledecode_hqx()``."
msgstr "``rlecode_hqx()``, ``rledecode_hqx()``."

msgid "The :func:`binascii.crc_hqx` function remains available."
msgstr "Функція :func:`binascii.crc_hqx` залишається доступною."

msgid "(Contributed by Victor Stinner in :issue:`45085`.)"
msgstr "(Надав Віктор Стіннер у :issue:`45085`.)"

msgid ""
"The distutils ``bdist_msi`` command, deprecated in Python 3.9, is now "
"removed. Use ``bdist_wheel`` (wheel packages) instead. (Contributed by Hugo "
"van Kemenade in :issue:`45124`.)"
msgstr ""
"Команда distutils ``bdist_msi``, застаріла в Python 3.9, тепер видалена. "
"Натомість використовуйте ``bdist_wheel`` (пакети коліс). (Надав Хуго ван "
"Кеменаде в :issue:`45124`.)"

msgid ""
"Due to significant security concerns, the *reuse_address* parameter of :meth:"
"`asyncio.loop.create_datagram_endpoint`, disabled in Python 3.9, is now "
"entirely removed. This is because of the behavior of the socket option "
"``SO_REUSEADDR`` in UDP. (Contributed by Hugo van Kemenade in :issue:"
"`45129`.)"
msgstr ""
"Через серйозні проблеми безпеки параметр *reuse_address* :meth:`asyncio.loop."
"create_datagram_endpoint`, вимкнений у Python 3.9, тепер повністю видалено. "
"Це через поведінку опції сокета ``SO_REUSEADDR`` в UDP. (Надав Хуго ван "
"Кеменаде в :issue:`45129`.)"

msgid ""
"Removed :meth:`__getitem__` methods of :class:`xml.dom.pulldom."
"DOMEventStream`, :class:`wsgiref.util.FileWrapper` and :class:`fileinput."
"FileInput`, deprecated since Python 3.9. (Contributed by Hugo van Kemenade "
"in :issue:`45132`.)"
msgstr ""
"Видалено :meth:`__getitem__` методи :class:`xml.dom.pulldom."
"DOMEventStream`, :class:`wsgiref.util.FileWrapper` і :class:`fileinput."
"FileInput`, застарілі з Python 3.9. (Надав Хуго ван Кеменаде в :issue:"
"`45132`.)"

msgid ""
"The following deprecated functions and methods are removed in the :mod:"
"`gettext` module: :func:`~gettext.lgettext`, :func:`~gettext.ldgettext`, :"
"func:`~gettext.lngettext` and :func:`~gettext.ldngettext`."
msgstr ""
"Наступні застарілі функції та методи видалено в модулі :mod:`gettext`: :func:"
"`~gettext.lgettext`, :func:`~gettext.ldgettext`, :func:`~gettext.lngettext` "
"і :func:`~gettext.ldngettext`."

msgid ""
"Function :func:`~gettext.bind_textdomain_codeset`, methods :meth:`~gettext."
"NullTranslations.output_charset` and :meth:`~gettext.NullTranslations."
"set_output_charset`, and the *codeset* parameter of functions :func:"
"`~gettext.translation` and :func:`~gettext.install` are also removed, since "
"they are only used for the ``l*gettext()`` functions. (Contributed by Dong-"
"hee Na and Serhiy Storchaka in :issue:`44235`.)"
msgstr ""
"Функція :func:`~gettext.bind_textdomain_codeset`, методи :meth:`~gettext."
"NullTranslations.output_charset` і :meth:`~gettext.NullTranslations."
"set_output_charset`, а також параметр *codeset* функцій :func:`~gettext ."
"translation` і :func:`~gettext.install` також видаляються, оскільки вони "
"використовуються лише для функцій ``l*gettext()``. (Надано Dong-hee Na та "
"Сергієм Сторчакою в :issue:`44235`.)"

msgid ""
"The :func:`@asyncio.coroutine <asyncio.coroutine>` :term:`decorator` "
"enabling legacy generator-based coroutines to be compatible with async/await "
"code. The function has been deprecated since Python 3.8 and the removal was "
"initially scheduled for Python 3.10. Use :keyword:`async def` instead. "
"(Contributed by Illia Volochii in :issue:`43216`.)"
msgstr ""
":func:`@asyncio.coroutine <asyncio.coroutine>` :term:`decorator`, що "
"дозволяє застарілим співпрограмам на основі генератора бути сумісними з "
"кодом async/await. Ця функція застаріла з Python 3.8, і видалення спочатку "
"було заплановано для Python 3.10. Натомість використовуйте :keyword:`async "
"def`. (Надав Ілля Волочій у :issue:`43216`.)"

msgid ""
":class:`asyncio.coroutines.CoroWrapper` used for wrapping legacy generator-"
"based coroutine objects in the debug mode. (Contributed by Illia Volochii "
"in :issue:`43216`.)"
msgstr ""
":class:`asyncio.coroutines.CoroWrapper` використовується для обгортання "
"застарілих об’єктів співпрограми на основі генератора в режимі налагодження. "
"(Надав Ілля Волочій у :issue:`43216`.)"

msgid ""
"Removed the deprecated ``split()`` method of :class:`_tkinter.TkappType`. "
"(Contributed by Erlend E. Aasland in :issue:`38371`.)"
msgstr ""
"Видалено застарілий метод ``split()`` :class:`_tkinter.TkappType`. (Надав "
"Erlend E. Aasland у :issue:`38371`.)"

msgid "Removed from the :mod:`inspect` module:"
msgstr "Видалено з модуля :mod:`inspect`:"

msgid ""
"the ``getargspec`` function, deprecated since Python 3.0; use :func:`inspect."
"signature` or :func:`inspect.getfullargspec` instead."
msgstr ""
"функція ``getargspec``, застаріла з Python 3.0; замість цього "
"використовуйте :func:`inspect.signature` або :func:`inspect.getfullargspec`."

msgid ""
"the ``formatargspec`` function, deprecated since Python 3.5; use the :func:"
"`inspect.signature` function and :class:`Signature` object directly."
msgstr ""
"функція ``formatargspec``, застаріла з Python 3.5; безпосередньо "
"використовуйте функцію :func:`inspect.signature` і об’єкт :class:`Signature`."

msgid ""
"the undocumented ``Signature.from_builtin`` and ``Signature.from_function`` "
"functions, deprecated since Python 3.5; use the :meth:`Signature."
"from_callable() <inspect.Signature.from_callable>` method instead."
msgstr ""
"недокументовані функції ``Signature.from_builtin`` і ``Signature."
"from_function``, застарілі з Python 3.5; замість цього використовуйте метод :"
"meth:`Signature.from_callable() <inspect.Signature.from_callable>`."

msgid "(Contributed by Hugo van Kemenade in :issue:`45320`.)"
msgstr "(Надав Хуго ван Кеменаде в :issue:`45320`.)"

msgid ""
"Remove namespace package support from unittest discovery. It was introduced "
"in Python 3.4 but has been broken since Python 3.7. (Contributed by Inada "
"Naoki in :issue:`23882`.)"
msgstr ""
"Видалити підтримку пакета простору імен із виявлення unittest. Він був "
"представлений у Python 3.4, але не працює з Python 3.7. (Надано Інадою Наокі "
"в :issue:`23882`.)"

msgid ""
"Remove ``__class_getitem__`` method from :class:`pathlib.PurePath`, because "
"it was not used and added by mistake in previous versions. (Contributed by "
"Nikita Sobolev in :issue:`46483`.)"
msgstr ""
"Видаліть метод ``__class_getitem__`` з :class:`pathlib.PurePath`, тому що "
"він не використовувався та був доданий помилково в попередніх версіях. "
"(Надав Микита Соболєв у :issue:`46483`.)"

msgid ""
"Remove the undocumented private ``float.__set_format__()`` method, "
"previously known as ``float.__setformat__()`` in Python 3.7. Its docstring "
"said: \"You probably don't want to use this function. It exists mainly to be "
"used in Python's test suite.\" (Contributed by Victor Stinner in :issue:"
"`46852`.)"
msgstr ""
"Видаліть недокументований приватний метод ``float.__set_format__()``, раніше "
"відомий як ``float.__setformat__()`` у Python 3.7. У його документації було "
"написано: \"Ви, мабуть, не хочете використовувати цю функцію. Вона існує в "
"основному для використання в наборі тестів Python\". (Надав Віктор Стіннер "
"у :issue:`46852`.)"

msgid ""
"The ``--experimental-isolated-subinterpreters`` configure flag (and "
"corresponding ``EXPERIMENTAL_ISOLATED_SUBINTERPRETERS``) have been removed."
msgstr ""
"Прапор конфігурації ``--experimental-isolated-subinterpreters`` (і "
"відповідний ``EXPERIMENTAL_ISOLATED_SUBINTERPRETERS``) видалено."

msgid "Porting to Python 3.11"
msgstr "Перенесення на Python 3.11"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"У цьому розділі наведено описані раніше зміни та інші виправлення помилок, "
"які можуть потребувати змін у вашому коді."

msgid "Changes in the Python API"
msgstr "Зміни в API Python"

msgid ""
"Prohibited passing non-:class:`concurrent.futures.ThreadPoolExecutor` "
"executors to :meth:`loop.set_default_executor` following a deprecation in "
"Python 3.8. (Contributed by Illia Volochii in :issue:`43234`.)"
msgstr ""
"Заборонено передачу не :class:`concurrent.futures.ThreadPoolExecutor` "
"виконавців до :meth:`loop.set_default_executor` після застарілої версії "
"Python 3.8. (Надав Ілля Волочій у :issue:`43234`.)"

msgid ""
":func:`open`, :func:`io.open`, :func:`codecs.open` and :class:`fileinput."
"FileInput` no longer accept ``'U'`` (\"universal newline\") in the file "
"mode. This flag was deprecated since Python 3.3. In Python 3, the "
"\"universal newline\" is used by default when a file is open in text mode.  "
"The :ref:`newline parameter <open-newline-parameter>` of :func:`open` "
"controls how universal newlines works. (Contributed by Victor Stinner in :"
"issue:`37330`.)"
msgstr ""
":func:`open`, :func:`io.open`, :func:`codecs.open` і :class:`fileinput."
"FileInput` більше не приймають ``'U'`` (\"універсальний новий рядок\") у "
"файловий режим. Цей прапорець застарів з Python 3.3. У Python 3 "
"\"універсальний новий рядок\" використовується за замовчуванням, коли файл "
"відкрито в текстовому режимі. Параметр :ref:`newline <open-newline-"
"parameter>` :func:`open` контролює роботу універсальних символів нового "
"рядка. (Надав Віктор Стіннер у :issue:`37330`.)"

msgid ""
"The :mod:`pdb` module now reads the :file:`.pdbrc` configuration file with "
"the ``'utf-8'`` encoding. (Contributed by Srinivas Reddy Thatiparthy (శ్రీనివాస్  "
"రెడ్డి తాటిపర్తి) in :issue:`41137`.)"
msgstr ""
"Модуль :mod:`pdb` тепер читає файл конфігурації :file:`.pdbrc` із кодуванням "
"``'utf-8'``. (Надав Срінівас Редді Татіпарті (శ్రీనివాస్ రెడ్డి తాటిపర్తి) у :issue:"
"`41137`.)"

msgid ""
"When sorting using tuples as keys, the order of the result may differ from "
"earlier releases if the tuple elements don't define a total ordering (see :"
"ref:`expressions-value-comparisons` for information on total ordering).  "
"It's generally true that the result of sorting simply isn't well-defined in "
"the absence of a total ordering on list elements."
msgstr ""
"Під час сортування за допомогою кортежів як ключів порядок результатів може "
"відрізнятися від попередніх випусків, якщо елементи кортежу не визначають "
"загальне впорядкування (перегляньте :ref:`expressions-value-comparisons` для "
"інформації про загальне впорядкування). Загалом вірно, що результат "
"сортування просто не є чітко визначеним за відсутності загального "
"впорядкування елементів списку."

msgid ""
":mod:`calendar`: The :class:`calendar.LocaleTextCalendar` and :class:"
"`calendar.LocaleHTMLCalendar` classes now use :func:`locale.getlocale`, "
"instead of using :func:`locale.getdefaultlocale`, if no locale is specified. "
"(Contributed by Victor Stinner in :issue:`46659`.)"
msgstr ""
":mod:`calendar`: класи :class:`calendar.LocaleTextCalendar` і :class:"
"`calendar.LocaleHTMLCalendar` тепер використовують :func:`locale.getlocale` "
"замість використання :func:`locale.getdefaultlocale`, якщо не вказано мову. "
"(Надав Віктор Стіннер у :issue:`46659`.)"

msgid ""
"Global inline flags (e.g. ``(?i)``) can now only be used at the start of the "
"regular expressions.  Using them not at the start of expression was "
"deprecated since Python 3.6. (Contributed by Serhiy Storchaka in :issue:"
"`47066`.)"
msgstr ""
"Глобальні вбудовані прапорці (наприклад, ``(?i)`` тепер можна "
"використовувати лише на початку регулярних виразів. Використання їх не на "
"початку виразу застаріло з Python 3.6. (Надав Сергій Сторчака в :issue:"
"`47066`.)"

msgid ""
":mod:`re` module: Fix a few long-standing bugs where, in rare cases, "
"capturing group could get wrong result. So the result may be different than "
"before. (Contributed by Ma Lin in :issue:`35859`.)"
msgstr ""
"Модуль :mod:`re`: виправлено кілька давніх помилок, через які, у рідкісних "
"випадках, група захоплення могла отримати неправильний результат. Тому "
"результат може бути іншим, ніж раніше. (Надав Ма Лінь у :issue:`35859`.)"

msgid ""
"The *population* parameter of :func:`random.sample` must be a sequence. "
"Automatic conversion of sets to lists is no longer supported. If the sample "
"size is larger than the population size, a :exc:`ValueError` is raised. "
"(Contributed by Raymond Hettinger in :issue:`40465`.)"
msgstr ""
"Параметр *population* :func:`random.sample` має бути послідовністю. "
"Автоматичне перетворення наборів у списки більше не підтримується. Якщо "
"розмір вибірки більший за розмір сукупності, виникає помилка :exc:"
"`ValueError`. (Надав Реймонд Геттінгер у :issue:`40465`.)"

msgid "Build Changes"
msgstr "Зміни збірки"

msgid ""
"Building Python now requires a C11 compiler without optional C11 features. "
"(Contributed by Victor Stinner in :issue:`46656`.)"
msgstr ""
"Для створення Python тепер потрібен компілятор C11 без додаткових функцій "
"C11. (Надав Віктор Стіннер у :issue:`46656`.)"

msgid ""
"Building Python now requires support of IEEE 754 floating point numbers. "
"(Contributed by Victor Stinner in :issue:`46917`.)"
msgstr ""
"Для створення Python тепер потрібна підтримка чисел з плаваючою комою IEEE "
"754. (Надав Віктор Стіннер у :issue:`46917`.)"

msgid ""
"CPython can now be built with the ThinLTO option via ``--with-lto=thin``. "
"(Contributed by Dong-hee Na and Brett Holman in :issue:`44340`.)"
msgstr ""
"Тепер CPython можна створювати з опцією ThinLTO через ``--with-lto=thin``. "
"(Надано Dong-hee Na та Brett Holman у :issue:`44340`.)"

msgid ""
"libpython is no longer linked against libcrypt. (Contributed by Mike Gilbert "
"in :issue:`45433`.)"
msgstr ""
"libpython більше не пов’язано з libcrypt. (Надав Майк Гілберт у :issue:"
"`45433`.)"

msgid ""
"Building Python now requires a C99 ``<math.h>`` header file providing the "
"following functions: ``copysign()``, ``hypot()``, ``isfinite()``, "
"``isinf()``, ``isnan()``, ``round()``. (Contributed by Victor Stinner in :"
"issue:`45440`.)"
msgstr ""
"Тепер для збирання Python потрібен файл заголовка C99 ``<math.h>``, який "
"забезпечує такі функції: ``copysign()``, ``hypot()``, ``isfinite()``, "
"``isinf()``, ``isnan()``, ``round()``. (Надав Віктор Стіннер у :issue:"
"`45440`.)"

msgid ""
"Building Python now requires a C99 ``<math.h>`` header file providing a "
"``NAN`` constant, or the ``__builtin_nan()`` built-in function. (Contributed "
"by Victor Stinner in :issue:`46640`.)"
msgstr ""
"Тепер для збирання Python потрібен файл заголовка C99 ``<math.h>``, що "
"містить константу ``NAN``, або вбудована функція ``__builtin_nan()``. (Надав "
"Віктор Стіннер у :issue:`46640`.)"

msgid ""
"Building Python now requires support for floating point Not-a-Number (NaN): "
"remove the ``Py_NO_NAN`` macro. (Contributed by Victor Stinner in :issue:"
"`46656`.)"
msgstr ""
"Тепер для створення Python потрібна підтримка Not-a-Number (NaN) з плаваючою "
"комою: видаліть макрос ``Py_NO_NAN``. (Надав Віктор Стіннер у :issue:"
"`46656`.)"

msgid ""
"Freelists for object structs can now be disabled. A new :program:`configure` "
"option :option:`!--without-freelists` can be used to disable all freelists "
"except empty tuple singleton. (Contributed by Christian Heimes in :issue:"
"`45522`)"
msgstr ""
"Вільні списки для структур об’єктів тепер можна вимкнути. Новий параметр :"
"program:`configure` :option:`!--without-freelists` можна використовувати для "
"вимкнення всіх списків безкоштовних, окрім пустого одиночного кортежу. "
"(Надав Крістіан Хеймс у :issue:`45522`)"

msgid ""
"``Modules/Setup`` and ``Modules/makesetup`` have been improved and tied up. "
"Extension modules can now be built through ``makesetup``. All except some "
"test modules can be linked statically into main binary or library. "
"(Contributed by Brett Cannon and Christian Heimes in :issue:`45548`, :issue:"
"`45570`, :issue:`45571`, and :issue:`43974`.)"
msgstr ""
"``Modules/Setup`` і ``Modules/makesetup`` були покращені та пов’язані. "
"Модулі розширення тепер можна створювати за допомогою ``makesetup``. Усі "
"тестові модулі, окрім деяких, можна зв’язати статично в головний двійковий "
"файл або бібліотеку. (Надано Бреттом Кенноном і Крістіаном Хеймсом у :issue:"
"`45548`, :issue:`45570`, :issue:`45571` і :issue:`43974`.)"

msgid ""
"Build dependencies, compiler flags, and linker flags for most stdlib "
"extension modules are now detected by :program:`configure`. libffi, libnsl, "
"libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk libs, and uuid flags are "
"detected by ``pkg-config`` (when available). (Contributed by Christian "
"Heimes and Erlend Egeberg Aasland in :issue:`45847`, :issue:`45747`, and :"
"issue:`45763`.)"
msgstr ""
"Залежності збірки, прапорці компілятора та прапорці компонувальника для "
"більшості модулів розширення stdlib тепер визначаються :program:`configure`. "
"Прапори libffi, libnsl, libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk "
"libs і uuid визначаються ``pkg-config`` (якщо доступно). (Надано Крістіаном "
"Хеймсом та Ерлендом Егебергом Асландом у :issue:`45847`, :issue:`45747` та :"
"issue:`45763`.)"

msgid ""
"Use the environment variables ``TCLTK_CFLAGS`` and ``TCLTK_LIBS`` to "
"manually specify the location of Tcl/Tk headers and libraries. The :program:"
"`configure` options ``--with-tcltk-includes`` and ``--with-tcltk-libs`` have "
"been removed."
msgstr ""
"Використовуйте змінні середовища ``TCLTK_CFLAGS`` і ``TCLTK_LIBS``, щоб "
"вручну вказати розташування заголовків і бібліотек Tcl/Tk. Параметри :"
"program:`configure` ``--with-tcltk-includes`` і ``--with-tcltk-libs`` "
"видалено."

msgid ""
"CPython now has experimental support for cross compiling to WebAssembly "
"platform ``wasm32-emscripten``. The effort is inspired by previous work like "
"Pyodide. (Contributed by Christian Heimes and Ethan Smith in :issue:`40280`.)"
msgstr ""
"CPython тепер має експериментальну підтримку крос-компіляції на платформі "
"WebAssembly ``wasm32-emscripten``. Зусилля надихнули попередні роботи, такі "
"як Pyodide. (Надано Крістіаном Хеймсом та Ітаном Смітом у :issue:`40280`.)"

msgid ""
"CPython will now use 30-bit digits by default for the Python :class:`int` "
"implementation. Previously, the default was to use 30-bit digits on "
"platforms with ``SIZEOF_VOID_P >= 8``, and 15-bit digits otherwise. It's "
"still possible to explicitly request use of 15-bit digits via either the ``--"
"enable-big-digits`` option to the configure script or (for Windows) the "
"``PYLONG_BITS_IN_DIGIT`` variable in ``PC/pyconfig.h``, but this option may "
"be removed at some point in the future. (Contributed by Mark Dickinson in :"
"issue:`45569`.)"
msgstr ""
"CPython тепер використовуватиме 30-бітні цифри за замовчуванням для "
"реалізації Python :class:`int`. Раніше за замовчуванням використовувалися 30-"
"бітні цифри на платформах із ``SIZEOF_VOID_P >= 8``, а в інших випадках – 15-"
"бітні цифри. Все ще можна явно надіслати запит на використання 15-бітних "
"цифр за допомогою опції ``--enable-big-digits`` сценарію налаштування або "
"(для Windows) змінної ``PYLONG_BITS_IN_DIGIT`` у ``PC/pyconfig. h``, але цей "
"параметр може бути видалено в якийсь момент у майбутньому. (Надав Марк "
"Дікінсон у :issue:`45569`.)"

msgid ""
"The :mod:`tkinter` package now requires Tcl/Tk version 8.5.12 or newer. "
"(Contributed by Serhiy Storchaka in :issue:`46996`.)"
msgstr ""
"Для пакета :mod:`tkinter` тепер потрібен Tcl/Tk версії 8.5.12 або новішої. "
"(Надав Сергій Сторчака в :issue:`46996`.)"

msgid "C API Changes"
msgstr "Зміни C API"

msgid ""
"Add a new :c:func:`PyType_GetName` function to get type's short name. "
"(Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""
"Додайте нову функцію :c:func:`PyType_GetName`, щоб отримати коротку назву "
"типу. (Надав Хай Ши в :issue:`42035`.)"

msgid ""
"Add a new :c:func:`PyType_GetQualName` function to get type's qualified "
"name. (Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""
"Додайте нову функцію :c:func:`PyType_GetQualName`, щоб отримати "
"кваліфіковане ім’я типу. (Надав Хай Ши в :issue:`42035`.)"

msgid ""
"Add new :c:func:`PyThreadState_EnterTracing` and :c:func:"
"`PyThreadState_LeaveTracing` functions to the limited C API to suspend and "
"resume tracing and profiling. (Contributed by Victor Stinner in :issue:"
"`43760`.)"
msgstr ""
"Додайте нові функції :c:func:`PyThreadState_EnterTracing` і :c:func:"
"`PyThreadState_LeaveTracing` до обмеженого C API, щоб призупиняти та "
"відновлювати трасування та профілювання. (Надав Віктор Стіннер у :issue:"
"`43760`.)"

msgid ""
"Added the :c:data:`Py_Version` constant which bears the same value as :c:"
"macro:`PY_VERSION_HEX`. (Contributed by  Gabriele N. Tornetta in :issue:"
"`43931`.)"
msgstr ""
"Додано константу :c:data:`Py_Version`, яка має те саме значення, що й :c:"
"macro:`PY_VERSION_HEX`. (Надано Gabriele N. Tornetta в :issue:`43931`.)"

msgid ""
":c:type:`Py_buffer` and APIs are now part of the limited API and the stable "
"ABI:"
msgstr ""
":c:type:`Py_buffer` та API тепер є частиною обмеженого API та стабільного "
"ABI:"

msgid ":c:func:`PyObject_CheckBuffer`"
msgstr ":c:func:`PyObject_CheckBuffer`"

msgid ":c:func:`PyObject_GetBuffer`"
msgstr ":c:func:`PyObject_GetBuffer`"

msgid ":c:func:`PyBuffer_GetPointer`"
msgstr ":c:func:`PyBuffer_GetPointer`"

msgid ":c:func:`PyBuffer_SizeFromFormat`"
msgstr ":c:func:`PyBuffer_SizeFromFormat`"

msgid ":c:func:`PyBuffer_ToContiguous`"
msgstr ":c:func:`PyBuffer_ToContiguous`"

msgid ":c:func:`PyBuffer_FromContiguous`"
msgstr ":c:func:`PyBuffer_FromContiguous`"

msgid ":c:func:`PyBuffer_CopyData`"
msgstr ":c:func:`PyBuffer_CopyData`"

msgid ":c:func:`PyBuffer_IsContiguous`"
msgstr ":c:func:`PyBuffer_IsContiguous`"

msgid ":c:func:`PyBuffer_FillContiguousStrides`"
msgstr ":c:func:`PyBuffer_FillContiguousStrides`"

msgid ":c:func:`PyBuffer_FillInfo`"
msgstr ":c:func:`PyBuffer_FillInfo`"

msgid ":c:func:`PyBuffer_Release`"
msgstr ":c:func:`PyBuffer_Release`"

msgid ":c:func:`PyMemoryView_FromBuffer`"
msgstr ":c:func:`PyMemoryView_FromBuffer`"

msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and :c:member:`~PyBufferProcs."
"bf_releasebuffer` type slots"
msgstr ""
":c:member:`~PyBufferProcs.bf_getbuffer` і :c:member:`~PyBufferProcs."
"bf_releasebuffer` слоти типу"

msgid "(Contributed by Christian Heimes in :issue:`45459`.)"
msgstr "(Надав Крістіан Хеймс у :issue:`45459`.)"

msgid ""
"Added the :c:data:`PyType_GetModuleByDef` function, used to get the module "
"in which a method was defined, in cases where this information is not "
"available directly (via :c:type:`PyCMethod`). (Contributed by Petr Viktorin "
"in :issue:`46613`.)"
msgstr ""
"Додано функцію :c:data:`PyType_GetModuleByDef`, яка використовується для "
"отримання модуля, у якому було визначено метод, у випадках, коли ця "
"інформація недоступна безпосередньо (через :c:type:`PyCMethod`). (Надав "
"Петро Вікторін у :issue:`46613`.)"

msgid ""
"Add new functions to pack and unpack C double (serialize and deserialize): :"
"c:func:`PyFloat_Pack2`, :c:func:`PyFloat_Pack4`, :c:func:`PyFloat_Pack8`, :c:"
"func:`PyFloat_Unpack2`, :c:func:`PyFloat_Unpack4` and :c:func:"
"`PyFloat_Unpack8`. (Contributed by Victor Stinner in :issue:`46906`.)"
msgstr ""
"Додайте нові функції для пакування та розпакування C double (серіалізація та "
"десеріалізація): :c:func:`PyFloat_Pack2`, :c:func:`PyFloat_Pack4`, :c:func:"
"`PyFloat_Pack8`, :c:func:`PyFloat_Unpack2` , :c:func:`PyFloat_Unpack4` і :c:"
"func:`PyFloat_Unpack8`. (Надав Віктор Стіннер у :issue:`46906`.)"

msgid ""
"Add new functions to get frame object attributes: :c:func:"
"`PyFrame_GetBuiltins`, :c:func:`PyFrame_GetGenerator`, :c:func:"
"`PyFrame_GetGlobals`, :c:func:`PyFrame_GetLasti`."
msgstr ""
"Додайте нові функції для отримання атрибутів об’єкта фрейму: :c:func:"
"`PyFrame_GetBuiltins`, :c:func:`PyFrame_GetGenerator`, :c:func:"
"`PyFrame_GetGlobals`, :c:func:`PyFrame_GetLasti`."

msgid ""
"Added two new functions to get and set the active exception instance: :c:"
"func:`PyErr_GetHandledException` and :c:func:`PyErr_SetHandledException`. "
"These are alternatives to :c:func:`PyErr_SetExcInfo()` and :c:func:"
"`PyErr_GetExcInfo()` which work with the legacy 3-tuple representation of "
"exceptions. (Contributed by Irit Katriel in :issue:`46343`.)"
msgstr ""
"Додано дві нові функції для отримання та встановлення активного екземпляра "
"винятку: :c:func:`PyErr_GetHandledException` і :c:func:"
"`PyErr_SetHandledException`. Це альтернативи :c:func:`PyErr_SetExcInfo()` і :"
"c:func:`PyErr_GetExcInfo()`, які працюють із застарілим 3-кортежним "
"представленням винятків. (Надано Іріт Катріель у :issue:`46343`.)"

msgid ""
"Added the :c:member:`PyConfig.safe_path` member. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""
"Додано член :c:member:`PyConfig.safe_path`. (Надав Віктор Стіннер у :gh:"
"`57684`.)"

msgid ""
":c:func:`PyErr_SetExcInfo()` no longer uses the ``type`` and ``traceback`` "
"arguments, the interpreter now derives those values from the exception "
"instance (the ``value`` argument). The function still steals references of "
"all three arguments. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
":c:func:`PyErr_SetExcInfo()` більше не використовує аргументи ``type`` і "
"``traceback``, тепер інтерпретатор отримує ці значення з екземпляра винятку "
"(аргумент ``value``). Функція все ще викрадає посилання всіх трьох "
"аргументів. (Надано Іріт Катріель у :issue:`45711`.)"

msgid ""
":c:func:`PyErr_GetExcInfo()` now derives the ``type`` and ``traceback`` "
"fields of the result from the exception instance (the ``value`` field). "
"(Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
":c:func:`PyErr_GetExcInfo()` тепер отримує поля ``type`` і ``traceback`` "
"результату з екземпляра винятку (поле ``value``). (Надано Іріт Катріель у :"
"issue:`45711`.)"

msgid ""
":c:type:`_frozen` has a new ``is_package`` field to indicate whether or not "
"the frozen module is a package.  Previously, a negative value in the "
"``size`` field was the indicator.  Now only non-negative values be used for "
"``size``. (Contributed by Kumar Aditya in :issue:`46608`.)"
msgstr ""
":c:type:`_frozen` має нове поле ``is_package``, яке вказує, чи є заморожений "
"модуль пакетом. Раніше індикатором було від’ємне значення в полі ``size``. "
"Тепер для ``size`` можна використовувати лише невід’ємні значення. (Надав "
"Кумар Адітя в :issue:`46608`.)"

msgid ""
":c:func:`_PyFrameEvalFunction` now takes ``_PyInterpreterFrame*`` as its "
"second parameter, instead of ``PyFrameObject*``. See :pep:`523` for more "
"details of how to use this function pointer type."
msgstr ""
":c:func:`_PyFrameEvalFunction` тепер приймає ``_PyInterpreterFrame*`` як "
"другий параметр замість ``PyFrameObject*``. Дивіться :pep:`523`, щоб "
"дізнатися більше про те, як використовувати цей тип покажчика функції."

msgid ""
":c:func:`PyCode_New` and :c:func:`PyCode_NewWithPosOnlyArgs` now take an "
"additional ``exception_table`` argument. Using these functions should be "
"avoided, if at all possible. To get a custom code object: create a code "
"object using the compiler, then get a modified version with the ``replace`` "
"method."
msgstr ""
":c:func:`PyCode_New` і :c:func:`PyCode_NewWithPosOnlyArgs` тепер приймають "
"додатковий аргумент ``exception_table``. Слід уникати використання цих "
"функцій, якщо це можливо. Щоб отримати спеціальний об’єкт коду: створіть "
"об’єкт коду за допомогою компілятора, а потім отримайте модифіковану версію "
"за допомогою методу ``replace``."

msgid ""
":c:type:`PyCodeObject` no longer has a ``co_code`` field.  Instead, use "
"``PyObject_GetAttrString(code_object, \"co_code\")`` or :c:func:"
"`PyCode_GetCode` to get the underlying bytes object. (Contributed by Brandt "
"Bucher in :issue:`46841` and Ken Jin in :gh:`92154`.)"
msgstr ""
":c:type:`PyCodeObject` більше не має поля ``co_code``. Натомість "
"використовуйте ``PyObject_GetAttrString(code_object, \"co_code\")`` або :c:"
"func:`PyCode_GetCode`, щоб отримати базовий об’єкт bytes. (Надано Брандтом "
"Бухером у :issue:`46841` та Кеном Джином у :gh:`92154`.)"

msgid ""
"The old trashcan macros (``Py_TRASHCAN_SAFE_BEGIN``/"
"``Py_TRASHCAN_SAFE_END``) are now deprecated. They should be replaced by the "
"new macros ``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``."
msgstr ""
"Старі макроси кошика (``Py_TRASHCAN_SAFE_BEGIN``/``Py_TRASHCAN_SAFE_END``) "
"тепер застаріли. Їх слід замінити новими макросами ``Py_TRASHCAN_BEGIN`` і "
"``Py_TRASHCAN_END``."

msgid "A tp_dealloc function that has the old macros, such as::"
msgstr "Функція tp_dealloc, яка містить старі макроси, наприклад::"

msgid "should migrate to the new macros as follows::"
msgstr "слід перейти на нові макроси наступним чином:"

msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in."
msgstr ""
"Зауважте, що ``Py_TRASHCAN_BEGIN`` має другий аргумент, який має бути "
"функцією звільнення, у якій він знаходиться."

msgid ""
"To support older Python versions in the same codebase, you can define the "
"following macros and use them throughout the code (credit: these were copied "
"from the ``mypy`` codebase)::"
msgstr ""
"Щоб підтримувати старіші версії Python у тій самій кодовій базі, ви можете "
"визначити наступні макроси та використовувати їх у всьому коді (автор: їх "
"було скопійовано з кодової бази ``mypy``):"

msgid ""
"The :c:func:`PyType_Ready` function now raises an error if a type is defined "
"with the :const:`Py_TPFLAGS_HAVE_GC` flag set but has no traverse function (:"
"c:member:`PyTypeObject.tp_traverse`). (Contributed by Victor Stinner in :"
"issue:`44263`.)"
msgstr ""
"Функція :c:func:`PyType_Ready` тепер викликає помилку, якщо тип визначено з "
"установленим прапорцем :const:`Py_TPFLAGS_HAVE_GC`, але не має функції "
"переходу (:c:member:`PyTypeObject.tp_traverse`). (Надав Віктор Стіннер у :"
"issue:`44263`.)"

msgid ""
"Heap types with the :const:`Py_TPFLAGS_IMMUTABLETYPE` flag can now inherit "
"the :pep:`590` vectorcall protocol.  Previously, this was only possible for :"
"ref:`static types <static-types>`. (Contributed by Erlend E. Aasland in :"
"issue:`43908`)"
msgstr ""
"Типи купи з прапорцем :const:`Py_TPFLAGS_IMMUTABLETYPE` тепер можуть "
"успадковувати протокол векторного виклику :pep:`590`. Раніше це було можливо "
"лише для :ref:`статичних типів <static-types>`. (Надав Erlend E. Aasland у :"
"issue:`43908`)"

msgid ""
"Since :c:func:`Py_TYPE()` is changed to a inline static function, "
"``Py_TYPE(obj) = new_type`` must be replaced with ``Py_SET_TYPE(obj, "
"new_type)``: see the :c:func:`Py_SET_TYPE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""
"Оскільки :c:func:`Py_TYPE()` змінено на вбудовану статичну функцію, "
"``Py_TYPE(obj) = new_type`` потрібно замінити на ``Py_SET_TYPE(obj, "
"new_type)``: див. Функція :c:func:`Py_SET_TYPE()` (доступна з Python 3.9). "
"Для зворотної сумісності можна використовувати цей макрос:"

msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr "(Надав Віктор Стіннер у :issue:`39573`.)"

msgid ""
"Since :c:func:`Py_SIZE()` is changed to a inline static function, "
"``Py_SIZE(obj) = new_size`` must be replaced with ``Py_SET_SIZE(obj, "
"new_size)``: see the :c:func:`Py_SET_SIZE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""
"Оскільки :c:func:`Py_SIZE()` змінено на вбудовану статичну функцію, "
"``Py_SIZE(obj) = new_size`` потрібно замінити на ``Py_SET_SIZE(obj, "
"new_size)``: див. Функція :c:func:`Py_SET_SIZE()` (доступна з Python 3.9). "
"Для зворотної сумісності можна використовувати цей макрос:"

msgid ""
"``<Python.h>`` no longer includes the header files ``<stdlib.h>``, ``<stdio."
"h>``, ``<errno.h>`` and ``<string.h>`` when the ``Py_LIMITED_API`` macro is "
"set to ``0x030b0000`` (Python 3.11) or higher. C extensions should "
"explicitly include the header files after ``#include <Python.h>``. "
"(Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""
"``<Python.h>`` no longer includes the header files ``<stdlib.h>``, ``<stdio."
"h>``, ``<errno.h>`` and ``<string.h>`` when the ``Py_LIMITED_API`` macro is "
"set to ``0x030b0000`` (Python 3.11) або вище. Розширення C мають явно "
"включати файли заголовків після ``#include <Python.h>``. (Надав Віктор "
"Стіннер у :issue:`45434`.)"

msgid ""
"The non-limited API files ``cellobject.h``, ``classobject.h``, ``code.h``, "
"``context.h``, ``funcobject.h``, ``genobject.h`` and ``longintrepr.h`` have "
"been moved to the ``Include/cpython`` directory. Moreover, the ``eval.h`` "
"header file was removed. These files must not be included directly, as they "
"are already included in ``Python.h``: :ref:`Include Files <api-includes>`. "
"If they have been included directly, consider including ``Python.h`` "
"instead. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""
"Необмежені файли API ``cellobject.h``, ``classobject.h``, ``code.h``, "
"``context.h``, ``funcobject.h``, ``genobject. h`` і ``longintrepr.h`` "
"переміщено до каталогу ``Include/cpython``. Крім того, файл заголовка ``eval."
"h`` було видалено. Ці файли не можна включати безпосередньо, оскільки вони "
"вже включені в ``Python.h``: :ref:`Включити файли <api-includes>`. Якщо їх "
"було включено напряму, подумайте про те, щоб натомість включити ``Python."
"h``. (Надав Віктор Стіннер у :issue:`35134`.)"

msgid ""
"The :c:func:`PyUnicode_CHECK_INTERNED` macro has been excluded from the "
"limited C API. It was never usable there, because it used internal "
"structures which are not available in the limited C API. (Contributed by "
"Victor Stinner in :issue:`46007`.)"
msgstr ""
"Макрос :c:func:`PyUnicode_CHECK_INTERNED` було виключено з обмеженого C API. "
"Його ніколи не можна було використовувати там, оскільки він використовував "
"внутрішні структури, які недоступні в обмеженому C API. (Надав Віктор "
"Стіннер у :issue:`46007`.)"

msgid ""
"The following frame functions and type are now directly available with "
"``#include <Python.h>``, it's no longer needed to add ``#include "
"<frameobject.h>``:"
msgstr ""
"Наступні функції та тип фрейму тепер доступні безпосередньо за допомогою "
"``#include <Python.h>``, більше не потрібно додавати ``#include <frameobject."
"h>``:"

msgid ":c:func:`PyFrame_Check`"
msgstr ":c:func:`PyFrame_Check`"

msgid ":c:func:`PyFrame_GetBack`"
msgstr ":c:func:`PyFrame_GetBack`"

msgid ":c:func:`PyFrame_GetBuiltins`"
msgstr ":c:func:`PyFrame_GetBuiltins`"

msgid ":c:func:`PyFrame_GetGenerator`"
msgstr ":c:func:`PyFrame_GetGenerator`"

msgid ":c:func:`PyFrame_GetGlobals`"
msgstr ":c:func:`PyFrame_GetGlobals`"

msgid ":c:func:`PyFrame_GetLasti`"
msgstr ":c:func:`PyFrame_GetLasti`"

msgid ":c:func:`PyFrame_GetLocals`"
msgstr ":c:func:`PyFrame_GetLocals`"

msgid ":c:type:`PyFrame_Type`"
msgstr ":c:type:`PyFrame_Type`"

msgid "(Contributed by Victor Stinner in :gh:`93937`.)"
msgstr "(Надав Віктор Стіннер у :gh:`93937`.)"

msgid ""
"The :c:type:`PyFrameObject` structure members have been removed from the "
"public C API."
msgstr ""
"Члени структури :c:type:`PyFrameObject` видалено з загальнодоступного C API."

msgid ""
"While the documentation notes that the :c:type:`PyFrameObject` fields are "
"subject to change at any time, they have been stable for a long time and "
"were used in several popular extensions."
msgstr ""
"Хоча в документації зазначено, що поля :c:type:`PyFrameObject` можуть бути "
"змінені в будь-який час, вони були стабільними протягом тривалого часу та "
"використовувалися в кількох популярних розширеннях."

msgid ""
"In Python 3.11, the frame struct was reorganized to allow performance "
"optimizations. Some fields were removed entirely, as they were details of "
"the old implementation."
msgstr ""
"У Python 3.11 структуру фрейму було реорганізовано для оптимізації "
"продуктивності. Деякі поля було повністю видалено, оскільки вони були "
"деталями старої реалізації."

msgid ":c:type:`PyFrameObject` fields:"
msgstr ":c:type:`PyFrameObject` поля:"

msgid "``f_back``: use :c:func:`PyFrame_GetBack`."
msgstr "``f_back``: використовуйте :c:func:`PyFrame_GetBack`."

msgid "``f_blockstack``: removed."
msgstr "``f_blockstack``: видалено."

msgid "``f_builtins``: use :c:func:`PyFrame_GetBuiltins`."
msgstr "``f_builtins``: використовуйте :c:func:`PyFrame_GetBuiltins`."

msgid "``f_code``: use :c:func:`PyFrame_GetCode`."
msgstr "``f_code``: використовуйте :c:func:`PyFrame_GetCode`."

msgid "``f_gen``: use :c:func:`PyFrame_GetGenerator`."
msgstr "``f_gen``: використовуйте :c:func:`PyFrame_GetGenerator`."

msgid "``f_globals``: use :c:func:`PyFrame_GetGlobals`."
msgstr "``f_globals``: використовуйте :c:func:`PyFrame_GetGlobals`."

msgid "``f_iblock``: removed."
msgstr "``f_iblock``: видалено."

msgid ""
"``f_lasti``: use :c:func:`PyFrame_GetLasti`. Code using ``f_lasti`` with "
"``PyCode_Addr2Line()`` should use :c:func:`PyFrame_GetLineNumber` instead; "
"it may be faster."
msgstr ""
"``f_lasti``: використовуйте :c:func:`PyFrame_GetLasti`. У коді, що "
"використовує ``f_lasti`` з ``PyCode_Addr2Line()``, замість цього слід "
"використовувати :c:func:`PyFrame_GetLineNumber`; це може бути швидше."

msgid "``f_lineno``: use :c:func:`PyFrame_GetLineNumber`"
msgstr "``f_lineno``: використовуйте :c:func:`PyFrame_GetLineNumber`"

msgid "``f_locals``: use :c:func:`PyFrame_GetLocals`."
msgstr "``f_locals``: використовуйте :c:func:`PyFrame_GetLocals`."

msgid "``f_stackdepth``: removed."
msgstr "``f_stackdepth``: видалено."

msgid "``f_state``: no public API (renamed to ``f_frame.f_state``)."
msgstr ""
"``f_state``: немає публічного API (перейменовано на ``f_frame.f_state``)."

msgid "``f_trace``: no public API."
msgstr "``f_trace``: немає публічного API."

msgid ""
"``f_trace_lines``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``."
msgstr ""
"``f_trace_lines``: використовуйте ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``."

msgid ""
"``f_trace_opcodes``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_opcodes\")``."
msgstr ""
"``f_trace_opcodes``: використовуйте "
"``PyObject_GetAttrString((PyObject*)frame, \"f_trace_opcodes\")``."

msgid "``f_localsplus``: no public API (renamed to ``f_frame.localsplus``)."
msgstr ""
"``f_localsplus``: немає публічного API (перейменовано на ``f_frame."
"localsplus``)."

msgid "``f_valuestack``: removed."
msgstr "``f_valuestack``: видалено."

msgid ""
"The Python frame object is now created lazily. A side effect is that the "
"``f_back`` member must not be accessed directly, since its value is now also "
"computed lazily. The :c:func:`PyFrame_GetBack` function must be called "
"instead."
msgstr ""
"Об’єкт рамки Python тепер створюється ліниво. Побічним ефектом є те, що до "
"члена ``f_back`` не можна звертатися безпосередньо, оскільки його значення "
"тепер також обчислюється ліниво. Натомість слід викликати функцію :c:func:"
"`PyFrame_GetBack`."

msgid ""
"Debuggers that accessed the ``f_locals`` directly *must* call :c:func:"
"`PyFrame_GetLocals` instead. They no longer need to call :c:func:"
"`PyFrame_FastToLocalsWithError` or :c:func:`PyFrame_LocalsToFast`, in fact "
"they should not call those functions. The necessary updating of the frame is "
"now managed by the virtual machine."
msgstr ""
"Налагоджувачі, які зверталися безпосередньо до ``f_locals``, *повинні* "
"замість цього викликати :c:func:`PyFrame_GetLocals`. Їм більше не потрібно "
"викликати :c:func:`PyFrame_FastToLocalsWithError` або :c:func:"
"`PyFrame_LocalsToFast`, насправді вони не повинні викликати ці функції. "
"Необхідне оновлення кадру тепер керується віртуальною машиною."

msgid "Code defining ``PyFrame_GetCode()`` on Python 3.8 and older::"
msgstr ""
"Код визначення ``PyFrame_GetCode()`` на Python 3.8 і старіших версіях::"

msgid "Code defining ``PyFrame_GetBack()`` on Python 3.8 and older::"
msgstr ""
"Код визначення ``PyFrame_GetBack()`` на Python 3.8 і старіших версіях::"

msgid ""
"Or use the `pythoncapi_compat project <https://github.com/python/"
"pythoncapi_compat>`__ to get these two functions on older Python versions."
msgstr ""
"Або скористайтеся проектом `pythoncapi_compat <https://github.com/python/"
"pythoncapi_compat>`__, щоб отримати ці дві функції на старіших версіях "
"Python."

msgid "Changes of the :c:type:`PyThreadState` structure members:"
msgstr "Зміни членів структури :c:type:`PyThreadState`:"

msgid ""
"``frame``: removed, use :c:func:`PyThreadState_GetFrame` (function added to "
"Python 3.9 by :issue:`40429`). Warning: the function returns a :term:`strong "
"reference`, need to call :c:func:`Py_XDECREF`."
msgstr ""
"``frame``: видалено, використовуйте :c:func:`PyThreadState_GetFrame` "
"(функцію додано до Python 3.9 :issue:`40429`). Попередження: функція "
"повертає :term:`strong reference`, потрібно викликати :c:func:`Py_XDECREF`."

msgid ""
"``tracing``: changed, use :c:func:`PyThreadState_EnterTracing` and :c:func:"
"`PyThreadState_LeaveTracing` (functions added to Python 3.11 by :issue:"
"`43760`)."
msgstr ""
"``tracing``: змінено, використовуйте :c:func:`PyThreadState_EnterTracing` і :"
"c:func:`PyThreadState_LeaveTracing` (функції, додані до Python 3.11 :issue:"
"`43760`)."

msgid ""
"``recursion_depth``: removed, use ``(tstate->recursion_limit - tstate-"
">recursion_remaining)`` instead."
msgstr ""
"``recursion_depth``: видалено, замість цього використовуйте ``(tstate-"
">recursion_limit - tstate->recursion_remaining)``."

msgid "``stackcheck_counter``: removed."
msgstr "``stackcheck_counter``: видалено."

msgid "Code defining ``PyThreadState_GetFrame()`` on Python 3.8 and older::"
msgstr ""
"Код визначення ``PyThreadState_GetFrame()`` на Python 3.8 і старіших "
"версіях::"

msgid ""
"Code defining ``PyThreadState_EnterTracing()`` and "
"``PyThreadState_LeaveTracing()`` on Python 3.10 and older::"
msgstr ""
"Код, що визначає ``PyThreadState_EnterTracing()`` і "
"``PyThreadState_LeaveTracing()`` на Python 3.10 і старіших версіях::"

msgid ""
"Or use `the pythoncapi_compat project <https://github.com/python/"
"pythoncapi_compat>`__ to get these functions on old Python functions."
msgstr ""
"Або використовуйте `проект pythoncapi_compat <https://github.com/python/"
"pythoncapi_compat>`__, щоб отримати ці функції на старих функціях Python."

msgid ""
"Distributors are encouraged to build Python with the optimized Blake2 "
"library `libb2`_."
msgstr ""
"Розповсюджувачам рекомендується створювати Python за допомогою оптимізованої "
"бібліотеки Blake2 `libb2`_."

msgid ""
":c:func:`PyConfig_Read` no longer calculates the initial search path, and "
"will not fill any values into :c:member:`PyConfig.module_search_paths`. To "
"calculate default paths and then modify them, finish initialization and use :"
"c:func:`PySys_GetObject` to retrieve :data:`sys.path` as a Python list "
"object and modify it directly."
msgstr ""
":c:func:`PyConfig_Read` більше не обчислює початковий шлях пошуку та не "
"заповнює жодних значень у :c:member:`PyConfig.module_search_paths`. Щоб "
"обчислити шляхи за замовчуванням і потім змінити їх, завершіть ініціалізацію "
"та використовуйте :c:func:`PySys_GetObject`, щоб отримати :data:`sys.path` "
"як об’єкт списку Python і змінити його безпосередньо."

msgid ""
"Deprecate the following functions to configure the Python initialization:"
msgstr "Застарілі такі функції для налаштування ініціалізації Python:"

msgid ":c:func:`PySys_AddWarnOptionUnicode`"
msgstr ":c:func:`PySys_AddWarnOptionUnicode`"

msgid ":c:func:`PySys_AddWarnOption`"
msgstr ":c:func:`PySys_AddWarnOption`"

msgid ":c:func:`PySys_AddXOption`"
msgstr ":c:func:`PySys_AddXOption`"

msgid ":c:func:`PySys_HasWarnOptions`"
msgstr ":c:func:`PySys_HasWarnOptions`"

msgid ":c:func:`PySys_SetArgvEx`"
msgstr ":c:func:`PySys_SetArgvEx`"

msgid ":c:func:`PySys_SetArgv`"
msgstr ":c:func:`PySys_SetArgv`"

msgid ":c:func:`PySys_SetPath`"
msgstr ":c:func:`PySys_SetPath`"

msgid ":c:func:`Py_SetPath`"
msgstr ":c:func:`Py_SetPath`"

msgid ":c:func:`Py_SetProgramName`"
msgstr ":c:func:`Py_SetProgramName`"

msgid ":c:func:`Py_SetPythonHome`"
msgstr ":c:func:`Py_SetPythonHome`"

msgid ":c:func:`Py_SetStandardStreamEncoding`"
msgstr ":c:func:`Py_SetStandardStreamEncoding`"

msgid ":c:func:`_Py_SetProgramFullPath`"
msgstr ":c:func:`_Py_SetProgramFullPath`"

msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`). (Contributed by Victor "
"Stinner in :gh:`88279`.)"
msgstr ""
"Замість цього використовуйте новий :c:type:`PyConfig` API :ref:`Конфігурації "
"ініціалізації Python <init-config>` (:pep:`587`). (Надав Віктор Стіннер у :"
"gh:`88279`.)"

msgid ""
"Deprecate the ``ob_shash`` member of the :c:type:`PyBytesObject`. Use :c:"
"func:`PyObject_Hash` instead. (Contributed by Inada Naoki in :issue:`46864`.)"
msgstr ""
"Застарілий член ``ob_shash`` :c:type:`PyBytesObject`. Натомість "
"використовуйте :c:func:`PyObject_Hash`. (Надано Інадою Наокі в :issue:"
"`46864`.)"

msgid ""
":c:func:`PyFrame_BlockSetup` and :c:func:`PyFrame_BlockPop` have been "
"removed. (Contributed by Mark Shannon in :issue:`40222`.)"
msgstr ""
":c:func:`PyFrame_BlockSetup` і :c:func:`PyFrame_BlockPop` видалено. (Надав "
"Марк Шеннон у :issue:`40222`.)"

msgid "Remove the following math macros using the ``errno`` variable:"
msgstr "Видаліть наступні математичні макроси за допомогою змінної ``errno``:"

msgid "``Py_ADJUST_ERANGE1()``"
msgstr "``Py_ADJUST_ERANGE1()``"

msgid "``Py_ADJUST_ERANGE2()``"
msgstr "``Py_ADJUST_ERANGE2()``"

msgid "``Py_OVERFLOWED()``"
msgstr "``Py_OVERFLOWED()``"

msgid "``Py_SET_ERANGE_IF_OVERFLOW()``"
msgstr "``Py_SET_ERANGE_IF_OVERFLOW()``"

msgid "``Py_SET_ERRNO_ON_MATH_ERROR()``"
msgstr "``Py_SET_ERRNO_ON_MATH_ERROR()``"

msgid "(Contributed by Victor Stinner in :issue:`45412`.)"
msgstr "(Надав Віктор Стіннер у :issue:`45412`.)"

msgid ""
"Remove ``Py_UNICODE_COPY()`` and ``Py_UNICODE_FILL()`` macros, deprecated "
"since Python 3.3. Use ``PyUnicode_CopyCharacters()`` or ``memcpy()`` "
"(``wchar_t*`` string), and ``PyUnicode_Fill()`` functions instead. "
"(Contributed by Victor Stinner in :issue:`41123`.)"
msgstr ""
"Видаліть макроси ``Py_UNICODE_COPY()`` і ``Py_UNICODE_FILL()``, застарілі з "
"Python 3.3. Замість цього використовуйте функції "
"``PyUnicode_CopyCharacters()`` або ``memcpy()`` (рядок ``wchar_t*``) і "
"``PyUnicode_Fill()``. (Надав Віктор Стіннер у :issue:`41123`.)"

msgid ""
"Remove the ``pystrhex.h`` header file. It only contains private functions. C "
"extensions should only include the main ``<Python.h>`` header file. "
"(Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""
"Видаліть файл заголовка ``pystrhex.h``. Він містить лише приватні функції. "
"Розширення C мають включати лише основний файл заголовка ``<Python.h>``. "
"(Надав Віктор Стіннер у :issue:`45434`.)"

msgid ""
"Remove the ``Py_FORCE_DOUBLE()`` macro. It was used by the "
"``Py_IS_INFINITY()`` macro. (Contributed by Victor Stinner in :issue:"
"`45440`.)"
msgstr ""
"Видаліть макрос ``Py_FORCE_DOUBLE()``. Його використовував макрос "
"``Py_IS_INFINITY()``. (Надав Віктор Стіннер у :issue:`45440`.)"

msgid ""
"The following items are no longer available when :c:macro:`Py_LIMITED_API` "
"is defined:"
msgstr ""
"Наступні елементи більше не доступні, коли визначено :c:macro:"
"`Py_LIMITED_API`:"

msgid ":c:func:`PyMarshal_WriteLongToFile`"
msgstr ":c:func:`PyMarshal_WriteLongToFile`"

msgid ":c:func:`PyMarshal_WriteObjectToFile`"
msgstr ":c:func:`PyMarshal_WriteObjectToFile`"

msgid ":c:func:`PyMarshal_ReadObjectFromString`"
msgstr ":c:func:`PyMarshal_ReadObjectFromString`"

msgid ":c:func:`PyMarshal_WriteObjectToString`"
msgstr ":c:func:`PyMarshal_WriteObjectToString`"

msgid "the ``Py_MARSHAL_VERSION`` macro"
msgstr "макрос ``Py_MARSHAL_VERSION``"

msgid "These are not part of the :ref:`limited API <stable-abi-list>`."
msgstr "Вони не є частиною :ref:`обмеженого API <stable-abi-list>`."

msgid "(Contributed by Victor Stinner in :issue:`45474`.)"
msgstr "(Надав Віктор Стіннер у :issue:`45474`.)"

msgid ""
"Exclude :c:func:`PyWeakref_GET_OBJECT` from the limited C API. It never "
"worked since the :c:type:`PyWeakReference` structure is opaque in the "
"limited C API. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""
"Виключіть :c:func:`PyWeakref_GET_OBJECT` з обмеженого C API. Це ніколи не "
"працювало, оскільки структура :c:type:`PyWeakReference` непрозора в "
"обмеженому C API. (Надав Віктор Стіннер у :issue:`35134`.)"

msgid ""
"Remove the ``PyHeapType_GET_MEMBERS()`` macro. It was exposed in the public "
"C API by mistake, it must only be used by Python internally. Use the "
"``PyTypeObject.tp_members`` member instead. (Contributed by Victor Stinner "
"in :issue:`40170`.)"
msgstr ""
"Видаліть макрос ``PyHeapType_GET_MEMBERS()``. Він був відкритий у "
"загальнодоступному C API помилково, він повинен використовуватися лише "
"внутрішньо Python. Натомість використовуйте член ``PyTypeObject."
"tp_members``. (Надав Віктор Стіннер у :issue:`40170`.)"

msgid ""
"Remove the ``HAVE_PY_SET_53BIT_PRECISION`` macro (moved to the internal C "
"API). (Contributed by Victor Stinner in :issue:`45412`.)"
msgstr ""
"Видаліть макрос ``HAVE_PY_SET_53BIT_PRECISION`` (перенесено до внутрішнього "
"API C). (Надав Віктор Стіннер у :issue:`45412`.)"
